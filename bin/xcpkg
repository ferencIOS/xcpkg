#!/bin/sh

# https://clang.llvm.org/docs/ClangCommandLineReference.html
# https://clang.llvm.org/docs/CrossCompilation.html
# https://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art024

_0=$0

unset CURRENT_SCRIPT_DIR
unset CURRENT_SCRIPT_FILENAME
unset CURRENT_SCRIPT_FILEPATH

CURRENT_SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd) || exit 1
CURRENT_SCRIPT_FILENAME=$(basename "$0")
CURRENT_SCRIPT_FILEPATH="$CURRENT_SCRIPT_DIR/$CURRENT_SCRIPT_FILENAME"


COLOR_RED='\033[0;31m'          # Red
COLOR_GREEN='\033[0;32m'        # Green
COLOR_YELLOW='\033[0;33m'       # Yellow
COLOR_BLUE='\033[0;94m'         # Blue
COLOR_PURPLE='\033[0;35m'       # Purple
COLOR_OFF='\033[0m'             # Reset

print() {
    printf '%b' "$*"
}

echo() {
    printf '%b\n' "$*"
}

info() {
    printf '%b\n' "💠  $*"
}

note() {
    printf '%b\n' "${COLOR_YELLOW}🔔  $*${COLOR_OFF}" >&2
}

warn() {
    printf '%b\n' "${COLOR_YELLOW}🔥  $*${COLOR_OFF}" >&2
}

success() {
    printf '%b\n' "${COLOR_GREEN}[✔] $*${COLOR_OFF}"
}

error() {
    printf '%b\n' "${COLOR_RED}💔  $*${COLOR_OFF}" >&2
}

die() {
    printf '%b\n' "${COLOR_RED}💔  $*${COLOR_OFF}" >&2
    exit 1
}

bppend_to_PATH() {
    case ":${PATH}:" in
        *:"$1":*) ;;
        *) export PATH="$1:$PATH" ;;
    esac
}

# check if file exists
# $1 FILEPATH
file_exists() {
    [ -n "$1" ] && [ -e "$1" ]
}

# check if command exists in filesystem
# $1 command name or path
command_exists_in_filesystem() {
    case $1 in
        '') return 1 ;;
        */*)
            case $(uname | tr A-Z a-z) in
                cygwin*)
                    case $1 in
                        /cygdrive/*/choco) executable "$1" ;;
                        /cygdrive/*) return 1 ;;
                        *) executable "$1" ;;
                    esac
                    ;;
                *) executable "$1" ;;
            esac
            ;;
        *)  command_exists_in_filesystem $(command -v "$1" || true)
    esac
}

executable() {
    file_exists "$1" && [ -x "$1" ]
}

die_if_file_is_not_exist() {
    file_exists "$1" || die "$1 is not exist."
}

die_if_not_executable() {
    executable "$1" || die "$1 is not executable."
}

step() {
    STEP_NUM=$(expr ${STEP_NUM-0} + 1)
    STEP_MESSAGE="$@"
    echo
    echo "${COLOR_PURPLE}=>> STEP ${STEP_NUM} : ${STEP_MESSAGE} ${COLOR_OFF}"
}

step2() {
    STEP2_NUM=$(expr ${STEP2_NUM-0} + 1)
    STEP2_MESSAGE="$@"
    echo
    echo "${COLOR_BLUE}>>> STEP ${STEP_NUM}.${STEP2_NUM} : ${STEP2_MESSAGE} ${COLOR_OFF}"
}

run() {
    echo "${COLOR_PURPLE}==>${COLOR_OFF} ${COLOR_GREEN}$@${COLOR_OFF}"
    eval "$*"
}

list() {
    for item in $@
    do
        echo "$item"
    done
}

list_length() {
    echo $#
}

shiftn() {
    shift "$1" && shift && echo "$@"
}

globing() {
    case $1 in
        '')   ;;
        \~/*) printf '%s\n' "$HOME/$(printf '%s\n' "$1" | cut -c3-)" ;;
        *)    printf '%s\n' "$1"
    esac
}

sed_in_place() {
    if command -v gsed > /dev/null ; then
        unset SED_IN_PLACE_ACTION
        SED_IN_PLACE_ACTION="$1"
        shift
        # contains ' but not contains \'
        if printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" " "' | grep -q 27 && ! printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" ""' | grep -q '5C 27' ; then
            run gsed -i "\"$SED_IN_PLACE_ACTION\"" $@
        else
            run gsed -i "'$SED_IN_PLACE_ACTION'" $@
        fi
    elif command -v sed  > /dev/null ; then
        if sed -i 's/a/b/g' $(mktemp) 2> /dev/null ; then
            unset SED_IN_PLACE_ACTION
            SED_IN_PLACE_ACTION="$1"
            shift
            if printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" " "' | grep -q 27 && ! printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" ""' | grep -q '5C 27' ; then
                run sed -i "\"$SED_IN_PLACE_ACTION\"" $@
            else
                run sed -i "'$SED_IN_PLACE_ACTION'" $@
            fi
        else
            unset SED_IN_PLACE_ACTION
            SED_IN_PLACE_ACTION="$1"
            shift
            if printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" " "' | grep -q 27 && ! printf "$SED_IN_PLACE_ACTION" | hexdump -v -e '1/1 "%02X" ""' | grep -q '5C 27' ; then
                run sed -i '""' "\"$SED_IN_PLACE_ACTION\"" $@
            else
                run sed -i '""' "'$SED_IN_PLACE_ACTION'" $@
            fi
        fi
    else
        die "please install sed utility."
    fi
}

getvalue() {
    if [ $# -eq 0 ] ; then
        cut -d= -f2
    else
        printf '%s\n' "$1" | cut -d= -f2
    fi
}

trim() {
    if [ $# -eq 0 ] ; then
        sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//'
    else
        if [ -n "$*" ] ; then
            echo "$*" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//'
        fi
    fi
}

tolower() {
    if [ $# -eq 0 ] ; then
        if command -v tr > /dev/null ; then
            tr A-Z a-z
        elif command -v  awk > /dev/null ; then
            awk '{print(tolower($0))}'
        elif command -v gawk > /dev/null ; then
            gawk '{print(tolower($0))}'
        else
            die "please install GNU CoreUtils or awk."
        fi
    else
        if [ -z "$*" ] ; then
            return 0
        fi
        if command -v tr > /dev/null ; then
            echo "$*" | tr A-Z a-z
        elif command -v  awk > /dev/null ; then
            echo "$*" | awk '{print(tolower($0))}'
        elif command -v gawk > /dev/null ; then
            echo "$*" | gawk '{print(tolower($0))}'
        elif command -v python > /dev/null ; then
            python  -c 'import sys; print(sys.argv[1].lower());' "$*"
        elif command -v python3 > /dev/null ; then
            python3 -c 'import sys; print(sys.argv[1].lower());' "$*"
        elif command -v python2 > /dev/null ; then
            python2 -c 'import sys; print(sys.argv[1].lower());' "$*"
        elif command -v perl > /dev/null ; then
            perl -e 'print @ARGV[0],"\n"' "$1"
        elif command -v node > /dev/null ; then
            node -e 'console.log(process.argv[2].toLowerCase())' - "$*"
        else
            die "please install GNU CoreUtils or awk."
        fi
    fi
}

own() {
    if command -v awk > /dev/null ; then
        ls -ld "$1" | awk '{print $3":"$4}'
    else
        ls -ld "$1" | cut -d ' ' -f4,6 | tr ' ' ':'
    fi
}

is_integer () {
    case "${1#[+-]}" in
        (*[!0123456789]*) return 1 ;;
        ('')              return 1 ;;
        (*)               return 0 ;;
    esac
}

# https://equa.space/sh/lolcat/
lolcat_awk() {
    awk -v angle=45 -v angle_phase=40 -v reverse=0 -v offset=195 -v offset_phase=0 -v width=100 -v width_phase=8 "$@" '
    function put_rgb(color) {
        printf "\033[%s38;2;%d;%d;%dm", reverse ? "7;" : "", int(color[1] * 255), int(color[2] * 255), int(color[3] * 255);
    }

    function hsv_to_rgb(hsv, rgb, c, h2, x) {
        c = hsv[2] * hsv[3];
        h2 = hsv[1] * 6;
        x = c * (1 - ((h2 % 2) - 1 > 0 ? (h2 % 2) - 1 : 1 - (h2 % 2)));
        if (int(h2) % 6 == 0) {
            rgb[1] = c; rgb[2] = x; rgb[3] = 0;
        } else if (int(h2) % 6 == 1) {
            rgb[1] = x; rgb[2] = c; rgb[3] = 0;
        } else if (int(h2) % 6 == 2) {
            rgb[1] = 0; rgb[2] = c; rgb[3] = x;
        } else if (int(h2) % 6 == 3) {
            rgb[1] = 0; rgb[2] = x; rgb[3] = c;
        } else if (int(h2) % 6 == 4) {
            rgb[1] = x; rgb[2] = 0; rgb[3] = c;
        } else if (int(h2) % 6 == 5) {
            rgb[1] = c; rgb[2] = 0; rgb[3] = x;
        }

        rgb[1] += hsv[2] - c;
        rgb[2] += hsv[2] - c;
        rgb[3] += hsv[2] - c;
    }

    BEGIN {
        srand();
        if (offset == "") offset = rand() * 360;
    }

    {
        y = NR - 1;
        for (x = 0; x < length($0); x++) {
            for (i = 0; i < 3; i++) {
                mult_x = cos((angle + i * angle_phase) / 57.2976);
                mult_y = sin((angle + i * angle_phase) / 57.2976);
                hsv[1] = (((x * mult_x + y * mult_y) / (width + width_phase * i)) % 1 + 1 + (offset + offset_phase * i) / 360) % 1;
                hsv[2] = 0.8;
                hsv[3] = 0.9;

                hsv_to_rgb(hsv, trgb);
                rgb[i + 1] = trgb[i + 1];
            }

            put_rgb(rgb);
            printf("%s", substr($0, x + 1, 1));
        }
        print "\033[0m";
    }
    '
}

# }}}
##############################################################################
# {{{ wfetch

# wfetch <URL> [--uri=URL-MIRROR] [--silent] [--sha256=SHA256] <--output-path=PATH>
# wfetch <URL> [--uri=URL-MIRROR] [--silent] [--sha256=SHA256] <--output-dir=DIR> <--output-name=NAME>
# wfetch <URL> [--uri=URL-MIRROR] [--silent] [--sha256=SHA256] <--output-dir=DIR> [--output-name=NAME]
# wfetch <URL> [--uri=URL-MIRROR] [--silent] [--sha256=SHA256] [--output-dir=DIR] <--output-name=NAME>

# influential environment variable:
# WFETCH_URL_TRANSFORM
wfetch() {
    unset FETCH_URL
    unset FETCH_URI
    unset FETCH_SHA256
    unset FETCH_OUTPUT_DIR
    unset FETCH_OUTPUT_NAME
    unset FETCH_OUTPUT_PATH
    unset FETCH_SILENT

    if [ -z "$1" ] ; then
        error "wfetch <URL> [OPTION]... , <URL> must not be empty."
        return 1
    fi

    if [ -z "$WFETCH_URL_TRANSFORM" ] ; then
        FETCH_URL="$1"
    else
        FETCH_URL="$("$WFETCH_URL_TRANSFORM" "$1")"
    fi

    shift

    while [ -n "$1" ]
    do
        case $1 in
            --silent)
                FETCH_SILENT=yes
                RUN_SILENT=yes
                ;;
            --sha256=*)
                FETCH_SHA256=$(getvalue "$1")
                ;;
            --uri=*)
                FETCH_URI=$(getvalue "$1")
                if [ -z "$FETCH_URI" ] ; then
                    error "wfetch <URL> --uri=<URL-MIRROR> , <URL-MIRROR> must not be empty."
                    return 1
                fi
                if [ -n "$WFETCH_URL_TRANSFORM" ] ; then
                    FETCH_URI="$("$WFETCH_URL_TRANSFORM" "$FETCH_URI")"
                fi
                ;;
            --output-dir=*)
                FETCH_OUTPUT_DIR=$(getvalue "$1")
                if [ -z "$FETCH_OUTPUT_DIR" ] ; then
                    error "wfetch <URL> --output-dir=<DIR> , <DIR> must not be empty."
                    return 1
                fi
                ;;
            --output-name=*)
                FETCH_OUTPUT_NAME=$(getvalue "$1")
                if [ -z "$FETCH_OUTPUT_NAME" ] ; then
                    error "wfetch <URL> --output-name=<NAME> , <NAME> must not be empty."
                    return 1
                fi
                ;;
            --output-path=*)
                FETCH_OUTPUT_PATH=$(getvalue "$1")
                if [ -z "$FETCH_OUTPUT_PATH" ] ; then
                    error "wfetch <URL> --output-path=<FILEPATH> , <FILEPATH> must not be empty."
                    return 1
                fi
                ;;
            *)  error "wfetch <URL> [OPTION]..., unrecognized option: $1

    wfetch command usage:

    wfetch <URL> [--url-mirror=URL2] [--silent] [--sha256=SHA256] <--output-path=PATH>
    wfetch <URL> [--url-mirror=URL2] [--silent] [--sha256=SHA256] <--output-dir=DIR> <--output-name=NAME>
    wfetch <URL> [--url-mirror=URL2] [--silent] [--sha256=SHA256] <--output-dir=DIR> [--output-name=NAME]
    wfetch <URL> [--url-mirror=URL2] [--silent] [--sha256=SHA256] [--output-dir=DIR] <--output-name=NAME>"
                return 1
        esac
        shift
    done

    if [ -z "$FETCH_URI" ] ; then
        FETCH_URI="$FETCH_URL"
    fi

    if [ -z "$FETCH_OUTPUT_PATH" ] ; then
        if [ -z "$FETCH_OUTPUT_DIR" ] && [ -z "$FETCH_OUTPUT_NAME" ] ; then
            FETCH_OUTPUT_PATH='-'
        else
            if [ -z "$FETCH_OUTPUT_DIR" ] ; then
                FETCH_OUTPUT_DIR="$PWD"
            fi

            if [ -z "$FETCH_OUTPUT_NAME" ] ; then
                FETCH_OUTPUT_NAME=$(basename "$FETCH_URL")
            fi

            FETCH_OUTPUT_PATH="$FETCH_OUTPUT_DIR/$FETCH_OUTPUT_NAME"

            if [ !          -d "$FETCH_OUTPUT_DIR" ] ; then
                run install -d "$FETCH_OUTPUT_DIR" || return 1
            fi
        fi
    elif [ "$FETCH_OUTPUT_PATH" = '-' ] ; then
        unset FETCH_OUTPUT_DIR
        unset FETCH_OUTPUT_NAME
    else
        FETCH_OUTPUT_DIR="$(dirname $FETCH_OUTPUT_PATH)"
        FETCH_OUTPUT_NAME="$(basename $FETCH_OUTPUT_PATH)"
        if [ !          -d "$FETCH_OUTPUT_DIR" ] ; then
            run install -d "$FETCH_OUTPUT_DIR" || return 1
        fi
    fi

    case $FETCH_URL in
        *.git)
            if [    -d "$FETCH_OUTPUT_PATH" ] ; then
                run cd "$FETCH_OUTPUT_PATH" || return 1
                if      git rev-parse 2> /dev/null ; then
                    run git pull || return 1
                    run git submodule update --recursive || return 1
                else
                    run cd .. || return 1
                    run rm -rf "$FETCH_OUTPUT_NAME" || return 1
                    run git clone --recursive "$FETCH_URL" "$FETCH_OUTPUT_NAME" || return 1
                fi
            else
                if [ !          -d "$FETCH_OUTPUT_DIR" ] ; then
                    run install -d "$FETCH_OUTPUT_DIR" || return 1
                fi
                run cd "$FETCH_OUTPUT_DIR" || return 1
                run git clone --recursive "$FETCH_URL" "$FETCH_OUTPUT_NAME" || return 1
            fi
            ;;
        *)
            if [ "$FETCH_OUTPUT_PATH" != '-' ] && [ -f "$FETCH_OUTPUT_PATH" ] ; then
                if [ -n "$FETCH_SHA256" ] ; then
                    if [ "$(sha256sum "$FETCH_OUTPUT_PATH" | cut -d ' ' -f1)" = "$FETCH_SHA256" ] ; then
                        success "$FETCH_OUTPUT_PATH already have been fetched."
                        return 0
                    fi
                fi
                rm -f "$FETCH_OUTPUT_PATH" || return 1
            fi

            for FETCH_TOOL in curl wget http lynx aria2c axel
            do
                if command_exists_in_filesystem "$FETCH_TOOL" ; then
                    break
                else
                    unset FETCH_TOOL
                fi
            done

            if [ -z "$FETCH_TOOL" ] ; then
                error "no fetch tool found, please install one of curl wget http lynx aria2c axel, then try again."
                return 1
            fi

            case $FETCH_TOOL in
                curl)
                    unset FETCH_TOOL_CURL_EXTRA_OPTIONS

                    if [ "$FETCH_SILENT" = yes ] ; then
                        FETCH_TOOL_CURL_OPTIONS='--no-progress-meter'
                    fi

                    if [ -f "$MY_CORE_DIR/etc/ssl/certs/cacert.pem" ] ; then
                        FETCH_TOOL_CURL_OPTIONS="--cacert $MY_CORE_DIR/etc/ssl/certs/cacert.pem"
                    fi

                    run "curl $FETCH_TOOL_CURL_OPTIONS --fail --retry 20 --retry-delay 30 --location -o '$FETCH_OUTPUT_PATH' '$FETCH_URL'" ||
                    run "curl $FETCH_TOOL_CURL_OPTIONS --fail --retry 20 --retry-delay 30 --location -o '$FETCH_OUTPUT_PATH' '$FETCH_URI'"
                    ;;
                wget)
                    run "wget --timeout=60 -O '$FETCH_OUTPUT_PATH' '$FETCH_URL'" ||
                    run "wget --timeout=60 -O '$FETCH_OUTPUT_PATH' '$FETCH_URI'"
                    ;;
                http)
                    run "http --timeout=60 -o '$FETCH_OUTPUT_PATH' '$FETCH_URL'" ||
                    run "http --timeout=60 -o '$FETCH_OUTPUT_PATH' '$FETCH_URI'"
                    ;;
                lynx)
                    run "lynx -source '$FETCH_URL' > '$FETCH_OUTPUT_PATH'" ||
                    run "lynx -source '$FETCH_URI' > '$FETCH_OUTPUT_PATH'"
                    ;;
                aria2c)
                    run "aria2c -d '$FETCH_OUTPUT_DIR' -o '$FETCH_OUTPUT_NAME' '$FETCH_URL'" ||
                    run "aria2c -d '$FETCH_OUTPUT_DIR' -o '$FETCH_OUTPUT_NAME' '$FETCH_URI'"
                    ;;
                axel)
                    run "axel -o '$FETCH_OUTPUT_PATH' '$FETCH_URL'" ||
                    run "axel -o '$FETCH_OUTPUT_PATH' '$FETCH_URI'"
                    ;;
                *)  error "wfetch() unimplementation: $FETCH_TOOL"
                    return 1
                    ;;
            esac

            [ $? -eq 0 ] || return 1

            if [ "$FETCH_OUTPUT_PATH" != '-' ] && [ -n "$FETCH_SHA256" ] ; then
                [ "$(sha256sum "$FETCH_OUTPUT_PATH" | cut -d ' ' -f1)" = "$FETCH_SHA256" ] || {
                    error "sha256sum mismatch.\n    expect : $FETCH_SHA256\n    actual : $(sha256sum $FETCH_OUTPUT_PATH | cut -d ' ' -f1)"
                    return 1
                }
            fi
    esac
}

# }}}
##############################################################################
# {{{ __upgrade_self

# __upgrade_self <URL>
  __upgrade_self() {
    if [ -z "$1" ] ; then
        error "__upgrade_self <URL> , <URL> must not be empty."
        return 1
    fi

    unset CURRENT_SCRIPT_REALPATH

    # if file exists and is a symbolic link
    if [ -L "$CURRENT_SCRIPT_FILEPATH" ] ; then
        # https://unix.stackexchange.com/questions/136494/whats-the-difference-between-realpath-and-readlink-f#:~:text=GNU%20coreutils%20introduced%20a%20realpath,in%20common%20with%20GNU%20readlink%20.
        if command -v realpath > /dev/null ; then
            CURRENT_SCRIPT_REALPATH=$(realpath $CURRENT_SCRIPT_FILEPATH)
        elif command -v readlink > /dev/null && readlink -f xx > /dev/null 2>&1 ; then
            CURRENT_SCRIPT_REALPATH=$(readlink -f $CURRENT_SCRIPT_FILEPATH)
        else
            CURRENT_SCRIPT_REALPATH=$(realpath $CURRENT_SCRIPT_FILEPATH)
        fi
    else
        CURRENT_SCRIPT_REALPATH="$CURRENT_SCRIPT_FILEPATH"
    fi

    printf '%b\n' "$COLOR_PURPLE==>$COLOR_OFF ${COLOR_GREEN}mktemp -d$COLOR_OFF"
    WORKING_DIR=$(mktemp -d)

    run cd $WORKING_DIR

    wfetch "$1" --output-path="$WORKING_DIR/self"

    __upgrade_self_exit() {
        if [ -w "$CURRENT_SCRIPT_REALPATH" ] ; then
            run      install -m 755 self "$CURRENT_SCRIPT_REALPATH"
        else
            run sudo install -m 755 self "$CURRENT_SCRIPT_REALPATH"
        fi

        run rm -rf $WORKING_DIR
    }

    trap __upgrade_self_exit EXIT
}

# }}}
##############################################################################
# {{{ __integrate_zsh_completions

# __integrate_zsh_completions <URL> [--output-dir=<DIR>]
  __integrate_zsh_completions() {
    if [ -z "$1" ] ; then
        error "__integrate_zsh_completions <URL> [--output-dir=<DIR>] , <URL> must not be empty."
        return 1
    else
        ZSH_COMPLETIONS_SCRIPT_URL="$1"
    fi

    shift

    unset OUTPUT_DIR

    for arg in $@
    do
        case $arg in
            --output-dir=*)
                OUTPUT_DIR=$(getvalue "$1")
                if [ -z "$OUTPUT_DIR" ] ; then
                    error "__integrate_zsh_completions <URL> [--output-dir=<DIR>] , <DIR> must not be empty."
                    return 1
                fi
                OUTPUT_DIR=$(globing "$OUTPUT_DIR")
                ;;
            *)  error "__integrate_zsh_completions <URL> [--output-dir=<DIR>] , unrecognized argument: $arg"
                return 1
        esac
    done

    ZSH_COMPLETIONS_SCRIPT_FILENAME="_$CURRENT_SCRIPT_FILENAME"

    if [ -n "$OUTPUT_DIR" ] ; then
        ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH="$OUTPUT_DIR/$ZSH_COMPLETIONS_SCRIPT_FILENAME"
    elif [ "$(uname)" = Linux ] && command -v termux-info > /dev/null && [ "$HOME" = '/data/data/com.termux/files/home' ] ; then
        ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH="/data/data/com.termux/files/usr/share/zsh/site-functions/$ZSH_COMPLETIONS_SCRIPT_FILENAME"
    else
        ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH="/usr/local/share/zsh/site-functions/$ZSH_COMPLETIONS_SCRIPT_FILENAME"
    fi

    # if file exists and is a symbolic link
    if [ -L "$ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH" ] ; then
        # https://unix.stackexchange.com/questions/136494/whats-the-difference-between-realpath-and-readlink-f#:~:text=GNU%20coreutils%20introduced%20a%20realpath,in%20common%20with%20GNU%20readlink%20.
        if command -v realpath > /dev/null ; then
            ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH=$(realpath $ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH)
        elif command -v readlink > /dev/null && readlink -f xx > /dev/null 2>&1 ; then
            ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH=$(readlink -f $ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH)
        else
            ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH=$(realpath $ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH)
        fi
    fi

    printf '%b\n' "$COLOR_PURPLE==>$COLOR_OFF ${COLOR_GREEN}mktemp -d$COLOR_OFF"
    WORKING_DIR=$(mktemp -d)

    run cd $WORKING_DIR

    wfetch "$ZSH_COMPLETIONS_SCRIPT_URL" --output-path="$WORKING_DIR/$ZSH_COMPLETIONS_SCRIPT_FILENAME"

    if [ -f "$ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH" ] ; then
        if [ -w "$ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH" ] ; then
            run      install -m 644 "$ZSH_COMPLETIONS_SCRIPT_FILENAME" "$ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH"
        else
            run sudo install -m 644 "$ZSH_COMPLETIONS_SCRIPT_FILENAME" "$ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH"
        fi
    else
        ZSH_COMPLETIONS_SCRIPT_OUT_DIR="$(dirname "$ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH")"
        if [ ! -d "$ZSH_COMPLETIONS_SCRIPT_OUT_DIR" ] ; then
            run install -d "$ZSH_COMPLETIONS_SCRIPT_OUT_DIR" || run sudo install -d "$ZSH_COMPLETIONS_SCRIPT_OUT_DIR"
        fi
        if [ -w "$ZSH_COMPLETIONS_SCRIPT_OUT_DIR" ] ; then
            run      install -m 644 "$ZSH_COMPLETIONS_SCRIPT_FILENAME" "$ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH"
        else
            run sudo install -m 644 "$ZSH_COMPLETIONS_SCRIPT_FILENAME" "$ZSH_COMPLETIONS_SCRIPT_OUT_FILEPATH"
        fi
    fi

    run rm -rf $WORKING_DIR

    printf '\n'
    note "${COLOR_YELLOW}you need to run command${COLOR_RED} ${COLOR_GREEN}autoload -U compinit && compinit${COLOR_OFF} ${COLOR_YELLOW}in zsh to make it work.${COLOR_OFF}"
}

# }}}
##############################################################################
# {{{ version

version_of_python_module() {
    unset PIP_COMMAND
    PIP_COMMAND=$(command -v pip3 || command -v pip)
    if [ -z "$PIP_COMMAND" ] ; then
        die "can't found pip command."
    else
        "$PIP_COMMAND" show $1 | grep 'Version:' | cut -d ' ' -f2
    fi
}

# retrive the version of a command from it's name or path
version_of_command() {
    case $(basename "$1") in
       ccache) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
        xmake) "$1" --version 2> /dev/null | head -n 1 | cut -d '+' -f1 | cut -d 'v' -f2 ;;
        cmake) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
         rake) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
         make) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
        gmake) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
       rustup) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
       rustc)  "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
        cargo) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
           go) "$1"   version | cut -d ' ' -f3 | cut -c3- ;;
         tree) "$1" --version | cut -d ' ' -f2 | cut -c2- ;;
   pkg-config) "$1" --version 2> /dev/null | head -n 1 ;;
     patchelf) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
       m4|gm4) "$1" --version 2> /dev/null | head -n 1 | awk '{print($NF)}';;
    autopoint) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
     xgettext) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
     automake|aclocal)
               "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
     autoconf|autoheader|autom4te|autoreconf|autoscan|autoupdate|ifnames)
               "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
     realpath) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
      libtool) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
   libtoolize|glibtoolize)
               "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
  intltoolize) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
      objcopy) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f5 ;;
         flex) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
        bison) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
         yacc) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
         nasm) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
         yasm) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
        patch) "$1" --version 2> /dev/null | head -n 1 | awk '{print($NF)}' ;;
        gperf) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
        groff) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
     makeinfo) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
     help2man) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
    gtkdocize) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
 sphinx-build) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
 glib-mkenums) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
 glib-compile-resources)
               "$1" --version ;;
         file) "$1" --version 2> /dev/null | head -n 1 | cut -d '-' -f2 ;;
      itstool) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
       protoc) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
        xmlto) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
      xmllint) ;;
     xsltproc) ;;
     rst2man|rst2man.py|rst2man-3|rst2man-3.6|rst2man-3.7|rst2man-3.8|rst2man-3.9)
               "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
         java) "$1"  -version 2>&1 | head -n 1 | cut -d ' ' -f3 | sed 's/"//g' ;;
         gzip) "$1" --version 2>&1 | head -n 1 | awk '{print($NF)}' ;;
         lzip) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
           xz) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
          zip) "$1" --version 2> /dev/null | sed -n '2p' | cut -d ' ' -f4 ;;
        unzip) "$1" -v        2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
        bzip2) "$1" --help 2>&1 | head -n 1 | cut -d ' ' -f8 | cut -d ',' -f1 ;;
          tar)
            VERSION_MSG=$("$1" --version 2> /dev/null | head -n 1)
            case $VERSION_MSG in
                  tar*) echo "$VERSION_MSG" | cut -d ' ' -f4 ;;
               bsdtar*) echo "$VERSION_MSG" | cut -d ' ' -f2 ;;
            esac
            ;;
          git) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 ;;
         curl) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
     awk|gawk) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f3 | tr , ' ' ;;
     sed|gsed) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
         cpan) ;;
         find) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
         diff) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
         grep) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 | cut -d '-' -f1 ;;
         ruby) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
         perl) "$1" -v | sed -n '2p' | sed 's/.*v\([0-9]\.[0-9][0-9]\.[0-9]\).*/\1/' ;;
          lua) "$1" -v 2>/dev/null | head -n 1 | cut -d ' ' -f2 ;;
    python|python2|python3)
               "$1" --version 2>&1 | head -n 1 | cut -d ' ' -f2 ;;
         pip)  "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
         pip3) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
         node) "$1" --version 2> /dev/null | head -n 1 | cut -d 'v' -f2 ;;
          zsh) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f2 ;;
         bash) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 | cut -d '(' -f1 ;;
       base64) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
      hexdump) "$1" --version 2> /dev/null | head -n 1 | cut -d ' ' -f4 ;;
      sqlite3) "$1"  -version 2> /dev/null | head -n 1 | cut -d ' ' -f1 ;;
            *) "$1" --version 2> /dev/null | head -n 1
    esac
}

# retrive the major part of the version of the given command
# Note: the version of the given command must have form: major.minor.patch
version_major_of_command() {
    version_of_command "$1" | cut -d. -f1
}

# retrive the minor part of the version of the given command
# Note: the version of the given command must have form: major.minor.patch
version_minor_of_command() {
    version_of_command "$1" | cut -d. -f2
}

# retrive the major part of the given version
# Note: the given version must have form: major.minor.patch
version_major_of_version() {
    echo "$1" | cut -d. -f1
}

# retrive the minor part of the given version
# Note: the given version must have form: major.minor.patch
version_minor_of_version() {
    echo "$1" | cut -d. -f2
}

version_sort() {
    # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sort.html
    # https://man.netbsd.org/NetBSD-8.1/i386/sort.1
    #
    # sort: unrecognized option: V
    # BusyBox v1.29.3 (2019-01-24 07:45:07 UTC) multi-call binary.
    # Usage: sort [-nrugMcszbdfiokt] [-o FILE] [-k start[.offset][opts][,end[.offset][opts]] [-t CHAR] [FILE]...
    if  echo | (sort -V > /dev/null 2>&1) ; then
        echo "$@" | tr ' ' '\n' | sort -V
    else
        echo "$@" | tr ' ' '\n' | sort -t. -n -k1,1 -k2,2 -k3,3 -k4,4
    fi
}

# check if match the condition
#
# condition:
# eq  equal
# ne  not equal
# gt  greater than
# lt  less than
# ge  greater than or equal
# le  less than or equal
#
# examples:
# version_match 1.15.3 eq 1.16.0
# version_match 1.15.3 lt 1.16.0
# version_match 1.15.3 gt 1.16.0
# version_match 1.15.3 le 1.16.0
# version_match 1.15.3 ge 1.16.0
version_match() {
    case $2 in
        eq)  [ "$1"  = "$3" ] ;;
        ne)  [ "$1" != "$3" ] ;;
        le)
            if [ "$1" = "$3" ] ; then
                return 0
            fi
            [ "$1" = "$(version_sort "$1" "$3" | head -n 1)" ]
            ;;
        ge)
            if [ "$1" = "$3" ] ; then
                return 0
            fi
            [ "$1" = "$(version_sort "$1" "$3" | tail -n 1)" ]
            ;;
        lt)
            if [ "$1" = "$3" ] ; then
                return 1
            fi
            [ "$1" = "$(version_sort "$1" "$3" | head -n 1)" ]
            ;;
        gt)
            if [ "$1" = "$3" ] ; then
                return 1
            fi
            [ "$1" = "$(version_sort "$1" "$3" | tail -n 1)" ]
            ;;
        *)  die "version_compare: $2: not supported operator."
    esac
}

# check if the version of give installed command match the condition
#
# condition:
# eq  equal
# ne  not equal
# gt  greater than
# lt  less than
# ge  greater than or equal
# le  less than or equal
#
# examples:
# command_exists_in_filesystem_and_version_matched automake eq 1.16.0
# command_exists_in_filesystem_and_version_matched automake lt 1.16.0
# command_exists_in_filesystem_and_version_matched automake gt 1.16.0
# command_exists_in_filesystem_and_version_matched automake le 1.16.0
# command_exists_in_filesystem_and_version_matched automake ge 1.16.0
# command_exists_in_filesystem_and_version_matched automake
command_exists_in_filesystem_and_version_matched() {
    if command_exists_in_filesystem "$1" ; then
        if [ $# -eq 3 ] ; then
            version_match "$(version_of_command "$1")" "$2" "$3"
        fi
    else
        return 1
    fi
}

# }}}
##############################################################################
# {{{ python_module

# examples:
# python_module is  installed libxml2
# python_module get version   libxml2
# python_module get location  libxml2
# python_module install       libxml2
python_module() {
    case $1 in
        is)
            [ $# -eq 3 ] || die "[python_module is] command accept 2 arguments."

            __PYTHON_COMMAND__=$(command -v python3 || command -v python3.9 || command -v python3.8 || command -v python3.7 || command -v python3.6 || command -v python3.5 || command -v python || echo python)
            __PIP_COMMAND__=$(command -v pip3 || command -v pip3.9 || command -v pip3.8 || command -v pip3.7 || command -v pip3.6 || command -v pip3.5 || command -v pip || echo pip)

            case $2 in
                installed)  "$__PYTHON_COMMAND__" -c "import $3" 2> /dev/null ;;
                *) die "python_module is $2: not support."
            esac
            ;;
        get)
            [ $# -eq 3 ] || die "[python_module get] command accept 2 arguments."

            __PYTHON_COMMAND__=$(command -v python3 || command -v python3.9 || command -v python3.8 || command -v python3.7 || command -v python3.6 || command -v python3.5 || command -v python || echo python)
            __PIP_COMMAND__=$(command -v pip3 || command -v pip3.9 || command -v pip3.8 || command -v pip3.7 || command -v pip3.6 || command -v pip3.5 || command -v pip || echo pip)

            case $2 in
                version)  "$__PIP_COMMAND__" show "$3" 2> /dev/null | grep 'Version:'  | cut -d ' ' -f2 ;;
                location) "$__PIP_COMMAND__" show "$3" 2> /dev/null | grep 'Location:' | cut -d ' ' -f2 ;;
                *) die "python_module get $2: not support."
            esac
            ;;
        install)
            if [ -z "$2" ] ; then
                die "please specify a python module name."
            fi
            if ! python_module is installed "$2" ; then
                note "${COLOR_GREEN}$2${COLOR_OFF} ${COLOR_YELLOW}python module is required, but it is not found on this machine, I will install it via${COLOR_OFF} ${COLOR_GREEN}$__PIP_COMMAND__${COLOR_OFF}"
                run "$__PIP_COMMAND__" install -U pip  || return 1
                run "$__PIP_COMMAND__" install -U "$2" || return 1
            fi
            ;;
        *)  die "python_module $1: not support."
    esac
}

# }}}
##############################################################################
# {{{ perl_module

# examples:
# perl_module is-installed  XML::Parser
# perl_module install       XML::Parser
# perl_module get-version   XML::Parser
# perl_module get-location  XML::Parser
perl_module() {
    case $1 in
        get-version)
            shift
            cpan -l 2>/dev/null | sed -n "/$1/p" | head -n 1 | cut -f2
            ;;
        get-location)
            shift
            __PERL_MODULE_NAME_TO_PATH=$(printf "%s.pm\n" "$1" | sed 's|::|/|g')
            for item in $(perl -e 'print "@INC"')
            do
                if [ -e  "$item/$__PERL_MODULE_NAME_TO_PATH" ] ; then
                    echo "$item/$__PERL_MODULE_NAME_TO_PATH"
                    return 0
                else
                    continue
                fi
                return 1
            done
            ;;
        is-installed)
            shift
            perl -M"$1" -le 'print "installed"' > /dev/null 2>&1
            ;;
        install)
            shift
            perl_module is-installed "$1" && return 0

            if command_exists_in_filesystem cpan  ; then
                note "${COLOR_GREEN}$@${COLOR_OFF} ${COLOR_YELLOW}perl module is required, but it is not found on this machine, I will install it via${COLOR_OFF} ${COLOR_GREEN}cpan${COLOR_OFF}"
                run cpan -i "$1"
            elif command_exists_in_filesystem cpanm ; then
                note "${COLOR_GREEN}$@${COLOR_OFF} ${COLOR_YELLOW}perl module is required, but it is not found on this machine, I will install it via${COLOR_OFF} ${COLOR_GREEN}cpanm${COLOR_OFF}"
                run cpanm "$1"
            else
                perl_module install $@
            fi
            ;;
        *)  die "perl_module $1: not support."
    esac
}

# }}}
##############################################################################
# {{{ operations of formula

__load_formula_of_the_given_package() {
    unset PACKAGE_FORMULA_LOADED

    unset PACKAGE_NAME
    unset PACKAGE_NAME_UPPERCASE_UNDERSCORE

    unset PACKAGE_SUMMARY
    unset PACKAGE_WEB_URL

    unset PACKAGE_GIT_URL
    unset PACKAGE_GIT_SHA
    unset PACKAGE_GIT_REF
    unset PACKAGE_SHALLOW

    unset PACKAGE_SVN_URL

    unset PACKAGE_SRC_URL
    unset PACKAGE_SRC_URI
    unset PACKAGE_SRC_SHA
    unset PACKAGE_SRC_NAME
    unset PACKAGE_SRC_TYPE
    unset PACKAGE_SRC_PATH

    unset PACKAGE_FIX_URL
    unset PACKAGE_FIX_SHA
    unset PACKAGE_FIX_NAME
    unset PACKAGE_FIX_TYPE
    unset PACKAGE_FIX_PATH

    unset PACKAGE_RES_URL
    unset PACKAGE_RES_SHA
    unset PACKAGE_RES_NAME
    unset PACKAGE_RES_TYPE
    unset PACKAGE_RES_PATH

    unset PACKAGE_VERSION
    unset PACKAGE_VERSION_MAJOR
    unset PACKAGE_VERSION_MINOR
    unset PACKAGE_VERSION_PATCH
    unset PACKAGE_VERSION_TWEAK

    unset PACKAGE_DEVELOPER

    unset PACKAGE_LICENSE

    unset PACKAGE_BSYSTEM

    unset PACKAGE_SYMLINK

    unset PACKAGE_BUILD_SYSTEM
    unset PACKAGE_BUILD_SYSTEM_GO
    unset PACKAGE_BUILD_SYSTEM_RAKE
    unset PACKAGE_BUILD_SYSTEM_NINJA
    unset PACKAGE_BUILD_SYSTEM_GMAKE
    unset PACKAGE_BUILD_SYSTEM_CMAKE
    unset PACKAGE_BUILD_SYSTEM_XMAKE
    unset PACKAGE_BUILD_SYSTEM_MESON
    unset PACKAGE_BUILD_SYSTEM_CARGO
    unset PACKAGE_BUILD_SYSTEM_AUTOGENSH
    unset PACKAGE_BUILD_SYSTEM_AUTOTOOLS
    unset PACKAGE_BUILD_SYSTEM_CONFIGURE
    unset PACKAGE_BUILD_SYSTEM_NDK_BUILD

    # dir relative to $PACKAGE_INSTALLING_TOP_DIR, which contains build script such as autogen.sh, configure, Makefile, CMakeLists.txt, meson.build, Cargo.toml, xmake.lua, etc.
    unset PACKAGE_BSCRIPT

    # if build in build script dir, otherwise build in build dir
    unset PACKAGE_BINBSTD
    unset PACKAGE_BUILD_IN_BSCRIPT_DIR

    # if build in parallel
    unset PACKAGE_BUILD_IN_PARALLEL
    unset PACKAGE_PARALLEL

    # space-separated    perl modules that are depended by this package when installing and/or runtime, which will be installed via cpan
    unset PACKAGE_DEP_PLM

    # space-separated python packages that are depended by this package when installing and/or runtime, which will be installed via pip3
    unset PACKAGE_DEP_PYM

    # space-separated   ppkg packages that are depended by this package when installing and/or runtime, which will be installed via uppm
    unset PACKAGE_DEP_UPP

    # space-separated   ppkg packages that are depended by this package when installing and/or runtime, which will be installed via ppkg
    unset PACKAGE_DEP_PKG

    unset PACKAGE_CDEFINE
    unset PACKAGE_CCFLAGS
    unset PACKAGE_XXFLAGS
    unset PACKAGE_LDFLAGS

    unset PACKAGE_FORMULA_FILEPATH

    unset -f prepare
    unset -f build
    unset -f build_configed

    PACKAGE_FORMULA_FILEPATH="$(__path_of_formula_of_the_given_package $1)" || return 1

    for key in summary web-url git-url git-sha git-ref shallow src-url src-uri src-sha fix-url fix-sha res-url res-sha dep-pkg dep-upp dep-pym dep-plm license version bsystem bscript binbstd cdefine ccflags xxflags ldflags parallel symlink
    do
        unset __KEY_UPPERCASE_UNDERSCORE__
        unset __VALUE__

        __KEY_UPPERCASE_UNDERSCORE__="$(printf '%s\n' "$key" | tr '-' '_' | tr a-z A-Z)"
        __VALUE__="$(yq ".$key" "$PACKAGE_FORMULA_FILEPATH")"

        if [ "$__VALUE__" = null ] ; then
                __VALUE__=
        fi

        eval "PACKAGE_$__KEY_UPPERCASE_UNDERSCORE__='$__VALUE__'"
    done

    unset PACKAGE_PREPARE_ACTIONS
    PACKAGE_PREPARE_ACTIONS="$(yq .prepare "$PACKAGE_FORMULA_FILEPATH")"

    unset PACKAGE_INSTALL_ACTIONS
    PACKAGE_INSTALL_ACTIONS="$(yq .install "$PACKAGE_FORMULA_FILEPATH")"

    if [ -z "$PACKAGE_BSYSTEM" ] && [ -n "$PACKAGE_INSTALL_ACTIONS" ]; then
        for FirstWordOfLineInInstallActions in $(printf '%s\n' "$PACKAGE_INSTALL_ACTIONS" | sed 's|^[ ]*||' | cut -d ' ' -f1)
        do
            case "$FirstWordOfLineInInstallActions" in
                configure)    PACKAGE_BSYSTEM=configure ; break ;;
                cmakew)       PACKAGE_BSYSTEM=cmake ; break ;;
                xmakew)       PACKAGE_BSYSTEM=xmake ; break ;;
                mesonw)       PACKAGE_BSYSTEM=meson ; break ;;
                gmakew)       PACKAGE_BSYSTEM=gmake ; break ;;
                cargow)       PACKAGE_BSYSTEM=cargo ; break ;;
                go|gow)       PACKAGE_BSYSTEM=go    ; break ;;
            esac
        done
    fi

    PACKAGE_NAME="$1"
    PACKAGE_NAME_UPPERCASE_UNDERSCORE=$(printf '%s\n' "$PACKAGE_NAME" | tr a-z A-Z | tr '@+-.' '_')

    PACKAGE_BUILD_SYSTEM=$PACKAGE_BSYSTEM

    PACKAGE_BUILD_IN_BSCRIPT_DIR=$PACKAGE_BINBSTD

    if [ -z "$PACKAGE_SYMLINK" ] ; then
        PACKAGE_SYMLINK=yes
    fi

    if [ -z "$PACKAGE_PARALLEL" ] ; then
        PACKAGE_PARALLEL=yes
        PACKAGE_BUILD_IN_PARALLEL=yes
    else
        PACKAGE_BUILD_IN_PARALLEL="$PACKAGE_PARALLEL"
    fi

    if [ -z "$PACKAGE_SUMMARY" ] ; then
        die "summary must be configed in $PACKAGE_FORMULA_FILEPATH"
    fi

    if [ -z "$PACKAGE_WEB_URL" ] ; then
        PACKAGE_WEB_URL="$PACKAGE_GIT_URL"
    fi

    if [ -z "$PACKAGE_WEB_URL" ] ; then
        die "web-url or git-url must be configed in $PACKAGE_FORMULA_FILEPATH"
    fi

    if [ -z "$PACKAGE_SRC_URL" ] ; then
        PACKAGE_SRC_URL="$PACKAGE_GIT_URL"
    fi

    if [ -z "$PACKAGE_SRC_URL" ] ; then
        die "src-url or git-url must be configed in $PACKAGE_FORMULA_FILEPATH"
    fi

    case $PACKAGE_SRC_URL in
        dir://*)   PACKAGE_SRC_TYPE=dir ;;
        *.git)     PACKAGE_SRC_TYPE=git    ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP git" ;;
        *.zip)     PACKAGE_SRC_TYPE=zip    ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl unzip" ;;
        *.tar.xz)  PACKAGE_SRC_TYPE=tar.xz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl gtar xz" ;;
        *.tar.gz)  PACKAGE_SRC_TYPE=tar.gz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl gtar gzip" ;;
        *.tar.lz)  PACKAGE_SRC_TYPE=tar.lz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl gtar lzip" ;;
        *.tar.bz2) PACKAGE_SRC_TYPE=tar.bz2; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl gtar bzip2" ;;
        *.tgz)     PACKAGE_SRC_TYPE=tar.gz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl gtar gzip" ;;
        *.txz)     PACKAGE_SRC_TYPE=tar.xz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl gtar xz" ;;
        *.c)       PACKAGE_SRC_TYPE=c      ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl" ;;
        *.cc)      PACKAGE_SRC_TYPE=cxx    ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl" ;;
        *.cxx)     PACKAGE_SRC_TYPE=cxx    ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl" ;;
        *.cpp)     PACKAGE_SRC_TYPE=cxx    ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP curl" ;;
        *)  die "unrecognized extension : $PACKAGE_SRC_URL. the supported extensions are .git .zip .tar.xz .tar.gz .tar.lz .tar.bz2 .tgz .txz"
    esac

    case $PACKAGE_SRC_TYPE in
        dir)
            PACKAGE_SRC_PATH=$(printf '%s\n' "$PACKAGE_SRC_URL" | cut -c7-)

            if [ -z "$PACKAGE_VERSION" ] ; then
                PACKAGE_VERSION="$(format_unix_timestamp "$TIMESTAMP_UNIX" '+%Y.%m.%d')"
            fi
            ;;
        git)
            PACKAGE_SRC_NAME="$PACKAGE_NAME.git"
            PACKAGE_SRC_PATH="$MY_CACHE_DIR/src/$PACKAGE_SRC_NAME"

            if [ -z "$PACKAGE_VERSION" ] ; then
                PACKAGE_VERSION="$(format_unix_timestamp "$TIMESTAMP_UNIX" '+%Y.%m.%d')"
            fi
            ;;
        *)
            if [ -z "$PACKAGE_SRC_SHA" ] ; then
                die "src-sha is not configed in $PACKAGE_FORMULA_FILEPATH"
            fi

            if [ -z "$PACKAGE_VERSION" ] ; then
                PACKAGE_VERSION="$(basename "$PACKAGE_SRC_URL" | tr '_@' - | sed 's|-stable||' | sed 's|-src||' | sed 's|\.src||' | sed 's|\.orig\.|.|' | awk '{str = tolower($0); gsub(".tar.xz", "", str); gsub(".tar.gz", "", str); gsub(".tar.lz", "", str); gsub(".tar.bz2", "", str); gsub(".tgz", "", str); gsub(".txz", "", str); gsub(".zip", "", str); print(str)}' | awk -F- '{print $NF}')"
                case $PACKAGE_VERSION in
                    '') die "version is not configed in $PACKAGE_FORMULA_FILEPATH" ;;
                    v*) PACKAGE_VERSION=$(printf '%s\n' "$PACKAGE_VERSION" | cut -c2-)
                esac
            fi

            PACKAGE_SRC_NAME="$PACKAGE_NAME-$PACKAGE_VERSION.$PACKAGE_SRC_TYPE"
            PACKAGE_SRC_PATH="$MY_CACHE_DIR/src/$PACKAGE_SRC_NAME"
    esac

    if [ -n "$PACKAGE_FIX_URL" ] ; then
        if [ -z "$PACKAGE_FIX_SHA" ] ; then
            die "fix-sha is not configed in $PACKAGE_FORMULA_FILEPATH"
        fi

        PACKAGE_FIX_NAME=$(basename "$PACKAGE_FIX_URL" | sed 's|?.*||')
        PACKAGE_FIX_PATH="$MY_CACHE_DIR/fix/$PACKAGE_FIX_NAME"

        case $PACKAGE_FIX_NAME in
            *.diff)    PACKAGE_FIX_TYPE=patch  ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch"           ;;
            *.patch)   PACKAGE_FIX_TYPE=patch  ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch"           ;;
            *.zip)     PACKAGE_FIX_TYPE=zip    ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch unzip"     ;;
            *.tar.xz)  PACKAGE_FIX_TYPE=tar.xz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar xz"    ;;
            *.tar.gz)  PACKAGE_FIX_TYPE=tar.gz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar gzip"  ;;
            *.tar.lz)  PACKAGE_FIX_TYPE=tar.lz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar lzip"  ;;
            *.tar.bz2) PACKAGE_FIX_TYPE=tar.bz2; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar bzip2" ;;
            *.tgz)     PACKAGE_FIX_TYPE=tar.gz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar gzip"  ;;
            *.txz)     PACKAGE_FIX_TYPE=tar.xz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar xz"    ;;
            *)  die "unrecognized fix extension : $PACKAGE_FIX_URL.\n    supported fix extensons are: .fix .diff .patch .zip .tar.xz .tar.gz .tar.lz .tar.bz2 .tgz .txz"
        esac
    fi

    if [ -n "$PACKAGE_RES_URL" ] ; then
        if [ -z "$PACKAGE_RES_SHA" ] ; then
            die "res-sha is not configed in $PACKAGE_FORMULA_FILEPATH"
        fi

        PACKAGE_RES_NAME=$(basename "$PACKAGE_RES_URL" | sed 's|?.*||')
        PACKAGE_RES_PATH="$MY_CACHE_DIR/res/$PACKAGE_RES_NAME"

        case $PACKAGE_RES_NAME in
            *.diff)    PACKAGE_RES_TYPE=patch  ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch"           ;;
            *.patch)   PACKAGE_RES_TYPE=patch  ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch"           ;;
            *.zip)     PACKAGE_RES_TYPE=zip    ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch unzip"     ;;
            *.tar.xz)  PACKAGE_RES_TYPE=tar.xz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar xz"    ;;
            *.tar.gz)  PACKAGE_RES_TYPE=tar.gz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar gzip"  ;;
            *.tar.lz)  PACKAGE_RES_TYPE=tar.lz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar lzip"  ;;
            *.tar.bz2) PACKAGE_RES_TYPE=tar.bz2; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar bzip2" ;;
            *.tgz)     PACKAGE_RES_TYPE=tar.gz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar gzip"  ;;
            *.txz)     PACKAGE_RES_TYPE=tar.xz ; PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP patch gtar xz"    ;;
            *)  die "unrecognized res extension : $PACKAGE_FIX_URL.\n    supported res extensons are: .fix .diff .patch .zip .tar.xz .tar.gz .tar.lz .tar.bz2 .tgz .txz"
        esac
    fi

    if [ -n "$PACKAGE_VERSION" ] ; then
        PACKAGE_VERSION_MAJOR="$(printf '%s\n' "$PACKAGE_VERSION" | cut -d. -f1)"
        PACKAGE_VERSION_MINOR="$(printf '%s\n' "$PACKAGE_VERSION" | cut -d. -f2)"
        PACKAGE_VERSION_PATCH="$(printf '%s\n' "$PACKAGE_VERSION" | cut -d. -f3)"
        PACKAGE_VERSION_TWEAK="$(printf '%s\n' "$PACKAGE_VERSION" | cut -d. -f4)"
    fi

    for item in $PACKAGE_BUILD_SYSTEM
    do
        case $item in
            ndk-build)   PACKAGE_BUILD_SYSTEM_NDK_BUILD=yes ;;
            autogen)     PACKAGE_BUILD_SYSTEM_AUTOGENSH=yes ; PACKAGE_BUILD_SYSTEM_GMAKE=yes ;;
            autotools)   PACKAGE_BUILD_SYSTEM_AUTOTOOLS=yes ; PACKAGE_BUILD_SYSTEM_GMAKE=yes ;;
            configure)   PACKAGE_BUILD_SYSTEM_CONFIGURE=yes ; PACKAGE_BUILD_SYSTEM_GMAKE=yes ;;
            cmake-gmake) PACKAGE_BUILD_SYSTEM_CMAKE=yes     ; PACKAGE_BUILD_SYSTEM_GMAKE=yes ;;
            cmake-ninja) PACKAGE_BUILD_SYSTEM_CMAKE=yes     ; PACKAGE_BUILD_SYSTEM_NINJA=yes ;;
            cmake)       PACKAGE_BUILD_SYSTEM_CMAKE=yes     ; PACKAGE_BUILD_SYSTEM_NINJA=yes ;;
            xmake)       PACKAGE_BUILD_SYSTEM_XMAKE=yes     ;;
            meson)       PACKAGE_BUILD_SYSTEM_MESON=yes     ; PACKAGE_BUILD_SYSTEM_NINJA=yes ;;
            ninja)       PACKAGE_BUILD_SYSTEM_NINJA=yes     ;;
            gmake)       PACKAGE_BUILD_SYSTEM_GMAKE=yes     ;;
            rake)        PACKAGE_BUILD_SYSTEM_RAKE=yes      ;;
            cargo)       PACKAGE_BUILD_SYSTEM_CARGO=yes     ;;
            go)          PACKAGE_BUILD_SYSTEM_GO=yes        ;;
        esac
    done

    for item in $PACKAGE_BUILD_SYSTEM
    do
        case $item in
            autogen)     PACKAGE_DEP_PKG="$PACKAGE_DEP_PKG automake" ;;
            autotools)   PACKAGE_DEP_PKG="$PACKAGE_DEP_PKG automake" ;;

            configure)   PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP gmake"  ;;
            cmake-gmake) PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP cmake gmake"  ;;
            cmake-ninja) PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP cmake ninja"  ;;
            cmake)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP cmake ninja"  ;;
            xmake)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP xmake"  ;;
            meson)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP ninja"  ;;
            ninja)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP ninja"  ;;
            gmake)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP gmake"  ;;
            rake)        PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP ruby"   ;;
            #cargo)       PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP rustup" ;;
            go)          PACKAGE_DEP_UPP="$PACKAGE_DEP_UPP golang" ;;
        esac
    done

    if [ "$PACKAGE_BUILD_SYSTEM_MESON" = yes ] ; then
        PACKAGE_DEP_PYM=meson
    fi

    if [ -n "$PACKAGE_DEP_PYM" ] ; then
        PACKAGE_DEP_PKG="$PACKAGE_DEP_PKG python3"
    fi

    if [ -n "$PACKAGE_DEP_PLM" ] ; then
        PACKAGE_DEP_PKG="$PACKAGE_DEP_PKG perl"
    fi

    if [ "$PACKAGE_BUILD_IN_PARALLEL" = no ] ; then
        BUILD_NJOBS=1
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_GO" = yes ] ; then
        PACKAGE_BINBSTD=yes
        PACKAGE_BUILD_IN_BSCRIPT_DIR=yes
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] ; then
        PACKAGE_BINBSTD=yes
        PACKAGE_BUILD_IN_BSCRIPT_DIR=yes
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_XMAKE" = yes ] ; then
        PACKAGE_BINBSTD=yes
        PACKAGE_BUILD_IN_BSCRIPT_DIR=yes
    fi

    PACKAGE_FORMULA_LOADED=yes
}

# examples:
# __view_formula_of_the_given_package curl
# __view_formula_of_the_given_package curl --paging=never
__view_formula_of_the_given_package() {
    die_if_package_is_not_specified "$1"

    unset PACKAGE_FORMULA_FILEPATH
    PACKAGE_FORMULA_FILEPATH="$(__path_of_formula_of_the_given_package $1)"

    if [ -z "$PACKAGE_FORMULA_FILEPATH" ] ; then
        die "$1 package is not available."
    fi

    shift

    unset VIEW_FORMULA_PAGING

    while [ -n "$1" ]
    do
        case $1 in
            --paging=*)
                VIEW_FORMULA_PAGING=$(getvalue "$1")
                case $VIEW_FORMULA_PAGING in
                    auto|always|never) ;;
                    *) die "--paging=VALUE VALUE must be one of auto, always, never"
                esac
                ;;
            *)  die "unrecognized argument: $1"
        esac
        shift
    done

    case $VIEW_FORMULA_PAGING in
        ''|auto)
            if command -v bat > /dev/null ; then
                bat --paging=auto "$PACKAGE_FORMULA_FILEPATH"
            else
                cat "$PACKAGE_FORMULA_FILEPATH"
                echo
                prompt_user_to_install_bat
            fi
            ;;
        always)
            if command -v bat > /dev/null ; then
                bat --paging=always "$PACKAGE_FORMULA_FILEPATH"
            else
                more "$PACKAGE_FORMULA_FILEPATH"
                echo
                prompt_user_to_install_bat
            fi
            ;;
        never)
            if command -v bat > /dev/null ; then
                bat --paging=never "$PACKAGE_FORMULA_FILEPATH"
            else
                cat "$PACKAGE_FORMULA_FILEPATH"
                echo
                prompt_user_to_install_bat
            fi
            ;;
    esac
}

__edit_formula_of_the_given_package() {
    die_if_package_is_not_specified "$1"

    unset PACKAGE_FORMULA_FILEPATH
    PACKAGE_FORMULA_FILEPATH="$(__path_of_formula_of_the_given_package $1)"

    if [ -z "$PACKAGE_FORMULA_FILEPATH" ] ; then
        die "$1 package is not available."
    fi

    [ -z "$2" ] || warn "edit action accept only one argument."

    if [ -z "$EDITOR" ] ; then
        EDITOR=$(command -v nvim || command -v vim || command -v vi || command -v open) || die "please set EDITOR environment variable."
    fi

    "$EDITOR" "$PACKAGE_FORMULA_FILEPATH"
}

# __create_formula_of_the_given_package <PACKAGE-NAME>
  __create_formula_of_the_given_package() {
    [ -z "$1" ] && {
        error "__create_formula_of_the_given_package <PACKAGE-NAME>, <PACKAGE-NAME> is not given."
        return 1
    }

    unset REPO_NAME
    REPO_NAME=offical-core

    if [ -e "$MY_FORMULA_REPO_DIR/$REPO_NAME/formula/$1.yml" ] ; then
        die "$MY_FORMULA_REPO_DIR/$REPO_NAME/formula/$1.yml formula already exists."
    fi

    cat > "$MY_FORMULA_REPO_DIR/$REPO_NAME/formula/$1.yml" <<EOF
summary: Summary of this package
web-url: https://www.xx.com
src-url: https://www.xx.com/pkgname-x.y.z.tar.gz
src-sha: c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1
version: x.y.z
dep-pkg: a b c
prepare:
install:
EOF
    __edit_formula_of_the_given_package "$1"
}

__delete_formula_of_the_given_package() {
    die_if_package_is_not_specified "$1"

    unset PACKAGE_FORMULA_FILEPATH
    PACKAGE_FORMULA_FILEPATH="$(__path_of_formula_of_the_given_package $1)"

    if [ -z "$PACKAGE_FORMULA_FILEPATH" ] ; then
        die "$1 package is not available."
    fi

    run rm "$PACKAGE_FORMULA_FILEPATH"
}

__rename_formula_of_the_given_package() {
    die_if_package_is_not_specified "$1"
    die_if_package_is_not_specified "$2"

    unset PACKAGE_FORMULA_REPO
    PACKAGE_FORMULA_REPO="$(__repo_of_formula_of_the_given_package $1)"

    if [ -z "$PACKAGE_FORMULA_REPO" ] ; then
        die "$1 package is not available."
    fi

    unset PACKAGE_FORMULA_FILEPATH_OLD
    unset PACKAGE_FORMULA_FILEPATH_NEW

    PACKAGE_FORMULA_FILEPATH_OLD="$MY_FORMULA_REPO_DIR/$PACKAGE_FORMULA_REPO/formula/$1.yml"
    PACKAGE_FORMULA_FILEPATH_NEW="$MY_FORMULA_REPO_DIR/$PACKAGE_FORMULA_REPO/formula/$2.yml"

    if [ -f "$PACKAGE_FORMULA_FILEPATH_NEW" ] ; then
        die "$2 package is already exist."
    fi

    if mv "$PACKAGE_FORMULA_FILEPATH_OLD" "$PACKAGE_FORMULA_FILEPATH_NEW" ; then
        success "rename formula $1 -> $2 success."
    else
        die "rename formula $1 -> $2 failed."
    fi
}

__list_formulas() {
    for repo in $(cut -d= -f1 "$MY_HOME_DIR/repos")
    do
        if [ -d  "$MY_FORMULA_REPO_DIR/$repo/formula" ] ; then
            ls "$MY_FORMULA_REPO_DIR/$repo/formula"/*.yml
        fi
    done
}

# __add_a_formula_repo NAME URL
__add_a_formula_repo() {
    if [ -z "$1" ] ; then
        die "please specify a repo name."
    fi

    if [ -z "$2" ] ; then
        die "please specify a repo url."
    fi

    case $2 in
        *.git)
            case $2 in
                http://*|https://*|git@*) ;;
                *)  die "$2: not a valid git url."
            esac
            ;;
        *)  die "$2: repo url must end with .git"
    esac

    for repoName in $(__list_formula_repositories | cut -d= -f1)
    do
        if [ "$repoName" = "$1" ] ; then
            die "$1 formula repo already exists."
        fi
    done

    echo "$1=$2" >> "$MY_HOME_DIR/repos"
}

# __del_a_formula_repo NAME
__del_a_formula_repo() {
    if [ -z "$1" ] ; then
        die "please specify a repo name."
    fi

    if [ "$1" = 'offical' ] ; then
        die "offical formula repo can not be deleted."
    fi

    unset REPO_EXISTS
    for repoName in $(__list_formula_repositories | cut -d= -f1)
    do
        if [ "$repoName" = "$1" ] ; then
            REPO_EXISTS=yes
        fi
    done
    if [ "$REPO_EXISTS" = yes ] ; then
        sed_in_place "/^$1=/d" "$MY_HOME_DIR/repos"
    else
        die "$1 formula repo not exists."
    fi
}

__repo_of_formula_of_the_given_package() {
    die_if_package_is_not_specified "$1"

    for repo in $(__list_formula_repositories | cut -d= -f1)
    do
        if [ -e "$MY_FORMULA_REPO_DIR/$repo/formula/$1.yml" ] ; then
            printf '%s\n' "$repo"
            return 0
        fi
    done

    return 1
}

__path_of_formula_of_the_given_package() {
    die_if_package_is_not_specified "$1"

    for repo in $(cut -d= -f1 "$MY_HOME_DIR/repos")
    do
        if [ -e  "$MY_FORMULA_REPO_DIR/$repo/formula/$1.yml" ] ; then
            echo "$MY_FORMULA_REPO_DIR/$repo/formula/$1.yml"
            return 0
        fi
    done
}

__list_formula_repositories() {
    if [ -e "$MY_HOME_DIR/repos" ] ; then
        cat "$MY_HOME_DIR/repos"
    else
        install -d "$MY_HOME_DIR"
        echo "offical=$MY_OFFICAL_FORMULA_REPO_URL" | tee "$MY_HOME_DIR/repos"
    fi
}

__update_formula_repositories() {
    for item in $(__list_formula_repositories)
    do
        unset FORMULA_REPO_NAME
        unset FORMULA_REPO_URL_

        FORMULA_REPO_NAME=$(printf '%s\n' "$item" | cut -d= -f1)
        FORMULA_REPO_URL_=$(printf '%s\n' "$item" | cut -d= -f2)

        echo "${COLOR_PURPLE}=== Updating formula repository${COLOR_OFF} ${COLOR_GREEN}$FORMULA_REPO_NAME${COLOR_OFF}"

        if [ -d     "$MY_FORMULA_REPO_DIR/$FORMULA_REPO_NAME" ] ; then
            run cd  "$MY_FORMULA_REPO_DIR/$FORMULA_REPO_NAME"
            run git pull origin master:master
            if [ "$(git branch | sed -n '/^*/p' | cut -d ' ' -f2)" != master ] ;  then
                run git checkout master
            fi
        else
            run install -d "$MY_FORMULA_REPO_DIR"
            run cd         "$MY_FORMULA_REPO_DIR"
            run git clone "$FORMULA_REPO_URL_" "$FORMULA_REPO_NAME"
        fi
    done
}

# }}}
##############################################################################

prompt_user_to_install_bat() {
    echo
    note "${COLOR_YELLOW}if you want to have a better experience, I strongly recommend you to install${COLOR_OFF} ${COLOR_GREEN}bat${COLOR_OFF} ${COLOR_YELLOW}on this machine. For more details, please visit website${COLOR_OFF} ${COLOR_GREEN}https://github.com/sharkdp/bat${COLOR_OFF}"
}

# fetch source code if needed
__fetch_sources_of_the_given_package() {
    case $PACKAGE_SRC_TYPE in
        git)
            if [ -d "$PACKAGE_SRC_PATH" ] ; then
                run cd  "$PACKAGE_SRC_PATH" || return 1
                if git rev-parse 2> /dev/null ; then
                    if [ -n "$PACKAGE_GIT_REV" ] ; then
                        if [ "$PACKAGE_GIT_REV" = "$(git rev-parse HEAD)" ] ; then
                            success "$PACKAGE_SRC_PATH already have been fetched."
                            return 0
                        fi
                        run git -c protocol.version=2 fetch --no-tags --prune --progress --depth=1 origin +$PACKAGE_GIT_REV:refs/remotes/origin/master &&
                        run git checkout --progress --force -B master refs/remotes/origin/master
                    else
                        run git pull &&
                        run git submodule update --recursive
                    fi
                else
                    if [ -n "$PACKAGE_GIT_REV" ] ; then
                        run rm -rf * &&
                        run git init &&
                        run git remote add origin "$PACKAGE_SRC_URL" &&
                        run git -c protocol.version=2 fetch --no-tags --prune --progress --depth=1 origin +$PACKAGE_GIT_REV:refs/remotes/origin/master &&
                        run git checkout --progress --force -B master refs/remotes/origin/master
                    else
                        run cd .. &&
                        run rm -rf "$PACKAGE_SRC_NAME" &&
                        run git clone --recursive "$PACKAGE_SRC_URL" "$PACKAGE_SRC_NAME"
                    fi
                fi
            else
                if [ -n "$PACKAGE_GIT_REV" ] ; then
                    run install -d "$PACKAGE_SRC_PATH" &&
                    run cd         "$PACKAGE_SRC_PATH" &&
                    run git init &&
                    run git remote add origin "$PACKAGE_SRC_URL" &&
                    run git -c protocol.version=2 fetch --no-tags --prune --progress --depth=1 origin +$PACKAGE_GIT_REV:refs/remotes/origin/master &&
                    run git checkout --progress --force -B master refs/remotes/origin/master
                else
                    if [ ! -d "$MY_CACHED_SOURCE_DIR" ] ; then
                        run install -d "$MY_CACHED_SOURCE_DIR" || return 1
                    fi
                    run cd "$MY_CACHED_SOURCE_DIR" &&
                    run git clone --recursive "$PACKAGE_SRC_URL" "$PACKAGE_SRC_NAME"
                fi
            fi
            ;;
        dir)  note "$PACKAGE_SRC_URL is local path, no need to fetch." ;;
        *)  wfetch "$PACKAGE_SRC_URL" --sha256="$PACKAGE_SRC_SUM" --output-path="$PACKAGE_SRC_PATH"
    esac
}

__fetch_patches_of_the_given_package() {
    if [ -n    "$PACKAGE_FIX_URL" ] ; then
        wfetch "$PACKAGE_FIX_URL" --sha256="$PACKAGE_FIX_SUM" --output-path="$PACKAGE_FIX_PATH"
    fi
}

__fetch_resources_of_the_given_package() {
    case $1 in
        '') die "$_0 fetch <PKG> , PKG must not be empty." ;;
        @all)
            shift
            unset STEP_NUM
            for PKG in $(__list_available_packages)
            do
                step "$PKG"
                 __load_formula_of_the_given_package "$PKG" $@ || return 1
                __fetch_sources_of_the_given_package "$PKG" $@ || return 1
                __fetch_patches_of_the_given_package "$PKG" $@ || return 1
            done
            ;;
        *)
             __load_formula_of_the_given_package $@ || return 1
            __fetch_sources_of_the_given_package $@ || return 1
            __fetch_patches_of_the_given_package $@
    esac
}

die_if_package_is_not_specified() {
    [ -n "$1" ] || die "no package is specified."
}

die_if_package_is_not_available() {
    is_package_available "$1" || die "$1 is not available."
}

die_if_package_is_not_installed() {
    is_package_installed "$1" || die "$1 is not installed."
}

# check if the given package is available
# if the version condition is given, check if the condition is matched
#
# condition operator:
# eq  equal
# ne  not equal
# gt  greater than
# lt  less than
# ge  greater than or equal
# le  less than or equal
#
# examples:
# is_package_available automake eq 1.16.0
# is_package_available automake lt 1.16.0
# is_package_available automake gt 1.16.0
# is_package_available automake le 1.16.0
# is_package_available automake ge 1.16.0
# is_package_available automake
is_package_available() {
    case $# in
        0)  die_if_package_is_not_specified ;;
        1)  [ -n "$(__path_of_formula_of_the_given_package $1)" ] ;;
        3)  __load_formula_of_the_given_package "$1"
            shift
            version_match $PACKAGE_VERSION $@
            ;;
        *)  die "is available command only accept 1 or 3 argument."
    esac
}

is_package_installed() {
    die_if_package_is_not_specified "$1"

    [ -d "$MY_INSTALL_DIR/$1" ]                    || return 1
    [ -f "$MY_INSTALL_DIR/$1/installed-metadata" ] || return 1
    [ -f "$MY_INSTALL_DIR/$1/installed-files" ]    || return 1
    [ -f "$MY_INSTALL_DIR/$1/installed-abis" ]     || return 1
}

is_package__outdated() {
    __load_formula_of_the_given_package "$1"

    __load_installed_metadata_of_the_given_package "$1"

    version_match "$PACKAGE_VERSION" gt "$INSTALLED_PKG_VERS"
}

__gen_github_workflows() {
    set -e

    unset BREAK
    unset NDEPENDED_PACKAGES
    unset AVAILABLE_PACKAGES
    unset GROUP_SIZE
    unset OUTPUT_DIR
    unset I

    while [ -n "$1" ]
    do
        case $1 in
            --group-size=*)
                GROUP_SIZE=$(getvalue "$1")
                is_integer "$GROUP_SIZE" || die "--group-size=INTEGER"
                ;;
            --output-dir=*)
                OUTPUT_DIR=$(getvalue "$1")
                case "$OUTPUT_DIR" in
                    '') die "--output-dir=<DIR>, DIR must not be empty." ;;
                    /*) ;;
                    \~|\~/) OUTPUT_DIR="${HOME}" ;;
                    \~/*)   OUTPUT_DIR="${HOME}$(printf "$OUTPUT_DIR" | cut -c3-)" ;;
                    .|./)   OUTPUT_DIR="${PWD}" ;;
                    *)      OUTPUT_DIR="${PWD}/$OUTPUT_DIR" ;;
                esac
                [ -d "$OUTPUT_DIR" ] || run install -d "$OUTPUT_DIR"
        esac
        shift
    done

    if [ -z "$GROUP_SIZE" ] ; then
        die "please sepecify --group-size=INTEGER argument."
    fi

    if [ -z "$OUTPUT_DIR" ] ; then
        OUTPUT_DIR="$MY_HOME_DIR/repos.d/offical/.github/workflows"
    fi

    GITHUB_ACTIONS_WORKFLOW_TEMPLATE_FILEPATH="$MY_HOME_DIR/repos.d/offical/.github/workflows/template"

    if [ ! -f "$GITHUB_ACTIONS_WORKFLOW_TEMPLATE_FILEPATH" ] ; then
        __update_formula_repositories
    fi

    AVAILABLE_PACKAGES=$(__list_available_packages)

    for x in $AVAILABLE_PACKAGES
    do
        if [ "$x" = 'test' ] ; then
            continue
        fi
        for y in $AVAILABLE_PACKAGES
        do
            if [ "$x" = "$y" ] || [ 'test' = "$y" ] ; then
                continue
            else
                for z in $(get_direct_dependency_package_list_of_the_given_package "$y")
                do
                    if [ "$x" = "$z" ] ; then
                        BREAK=yes
                        break 2
                    fi
                done
            fi
        done
        if [ "$BREAK" = yes ] ; then
            unset BREAK
        else
            if [ -z "$NDEPENDED_PACKAGES" ] ; then
                NDEPENDED_PACKAGES="$x"
            else
                NDEPENDED_PACKAGES="$NDEPENDED_PACKAGES $x"
            fi
            if [ "$(list_length $NDEPENDED_PACKAGES)" -eq "$GROUP_SIZE" ] ; then
                unset OUTPUT_FILEPATH

                I=$(expr ${I-0} + 1)
                OUTPUT_FILEPATH="$OUTPUT_DIR/ci$I.yml"
                NDEPENDED_PACKAGES=$(echo "$NDEPENDED_PACKAGES" | tr ' ' ,)

                echo
                run cp "$GITHUB_ACTIONS_WORKFLOW_TEMPLATE_FILEPATH" "$OUTPUT_FILEPATH"
                sed_in_place "s/INDEX/$I/"                     "$OUTPUT_FILEPATH"
                sed_in_place "s/PKGLIST/$NDEPENDED_PACKAGES/"  "$OUTPUT_FILEPATH"

                unset NDEPENDED_PACKAGES
            fi
        fi
    done
    if [ -n "$NDEPENDED_PACKAGES" ] ; then
        unset OUTPUT_FILEPATH

        I=$(expr ${I-0} + 1)
        OUTPUT_FILEPATH="$OUTPUT_DIR/ci$I.yml"
        NDEPENDED_PACKAGES=$(echo "$NDEPENDED_PACKAGES" | tr ' ' ,)

        run cp "$GITHUB_ACTIONS_WORKFLOW_TEMPLATE_FILEPATH" "$OUTPUT_FILEPATH"
        sed_in_place "s/INDEX/$I/"                     "$OUTPUT_FILEPATH"
        sed_in_place "s/PKGLIST/$NDEPENDED_PACKAGES/"  "$OUTPUT_FILEPATH"
    fi
}

__list_available_packages() {
    for repo in $(__list_formula_repositories | cut -d= -f1)
    do
        cd "$MY_FORMULA_REPO_DIR/$repo/formula" || return 1
        ls -1 *.yml | sed 's/\.yml$//g' || return 1
    done
}

__list_installed_packages() {
    if [ -d "$MY_INSTALL_DIR" ] ; then
         cd "$MY_INSTALL_DIR" 2>/dev/null || return 1
    else
        return 0
    fi

    for packageName in *
    do
        if is_package_installed "$packageName" ; then
            echo "$packageName"
        fi
    done
}

__list__outdated_packages() {
    if [ -d "$MY_INSTALL_DIR" ] ; then
         cd "$MY_INSTALL_DIR" 2>/dev/null || return 1
    else
        return 0
    fi

    for packageName in *
    do
        is_package_available "$packageName" || continue
        is_package_installed "$packageName" || continue
        is_package__outdated "$packageName" || continue
        echo "$packageName"
    done
}

__tree_the_given_installed_package() {
    die_if_package_is_not_installed "$1"
    handle_dependency required exe tree
    run tree $(shiftn 1 $@) "$MY_INSTALL_DIR/$1"
}

__uninstall_the_given_packages() {
    die_if_package_is_not_specified "$1"

    for packageName in $@
    do
        __uninstall_the_given_package "$packageName" || return 1
    done
}

__uninstall_the_given_package() {
    die_if_package_is_not_installed "$1"

    run rm -rf "$MY_INSTALL_DIR/$1"
}

__reinstall_the_given_packages() {
    inspect_install_arguments $@

    die_if_package_is_not_specified $USER_SPECIFIED_PACKAGE_LIST

    for packageName in $USER_SPECIFIED_PACKAGE_LIST
    do
        die_if_package_is_not_available "$packageName"
        die_if_package_is_not_installed "$packageName"
    done

    __config_native_toolchain_environment_variables

    for INSTALLING_PACKAGE in $USER_SPECIFIED_PACKAGE_LIST
    do
        [ -d "$MY_BACKUP_DIR" ] || {
            install -d "$MY_BACKUP_DIR" || return 1
        }

        mv "$MY_INSTALL_DIR/$INSTALLING_PACKAGE" "$MY_BACKUP_DIR/$INSTALLING_PACKAGE" || return 1

        (__install_the_given_package "$INSTALLING_PACKAGE") || return 1

        rm -rf "$MY_BACKUP_DIR/$INSTALLING_PACKAGE" || return 1
    done
}

__upgrade_packages() {
    inspect_install_arguments $@

    if [ -z "$USER_SPECIFIED_PACKAGE_LIST" ] ; then
        USER_SPECIFIED_PACKAGE_LIST=$(__list__outdated_packages)
    fi

    for packageName in $USER_SPECIFIED_PACKAGE_LIST
    do
        die_if_package_is_not_available "$packageName"
        die_if_package_is_not_installed "$packageName"
    done

    __config_native_toolchain_environment_variables

    for INSTALLING_PACKAGE in $USER_SPECIFIED_PACKAGE_LIST
    do
        [ -d "$MY_BACKUP_DIR" ] || {
            install -d "$MY_BACKUP_DIR" || return 1
        }

        mv "$MY_INSTALL_DIR/$INSTALLING_PACKAGE" "$MY_BACKUP_DIR/$INSTALLING_PACKAGE" || return 1

        (__install_the_given_package "$INSTALLING_PACKAGE") || return 1

        rm -rf "$MY_BACKUP_DIR/$INSTALLING_PACKAGE" || return 1
    done
}

__cleanup() {
    [ -d "$MY_CACHED_SOURCE_DIR" ] || return 0
    for repo in $(__list_formula_repositories | cut -d= -f1)
    do
        cd "$MY_FORMULA_REPO_DIR/$repo/formula" || return 1
        for item in $(ls)
        do
            if [ -f "$item" ] ; then
                case $item in
                    *.yml)
                        __load_formula_of_the_given_package $(echo "$item" | sed 's/\.yml$//g')
                esac
            fi
        done
    done
    success "Done."
}

__search_packages() {
    if [ -z "$1" ] ; then
        die "please specify a keyword."
    fi

    for repo in $(__list_formula_repositories | cut -d= -f1)
    do
        cd "$MY_FORMULA_REPO_DIR/$repo/formula" && ls -1 *.yml | sed 's/\.yml$//g' | grep "$*"
    done
}

__compare_versions_with_brew() {
    get_brew_package_name_from_my_package_name() {
        case $1 in
            file)     printf '%s\n' 'file-formula' ;;
            delta)    printf '%s\n' 'git-delta' ;;
            gmake)    printf '%s\n' 'make'      ;;
            gtar)     printf '%s\n' 'gnu-tar'   ;;
            libjxl)   printf '%s\n' 'jpeg-xl'   ;;
            blake3)   printf '%s\n' 'b3sum'     ;;
            libwebp)  printf '%s\n' 'webp'      ;;
            proj7)    printf '%s\n' 'proj@7'    ;;
            openssl)  printf '%s\n' 'openssl@1.1';;
            freetype2)printf '%s\n' 'freetype'  ;;
            freetype2-with-harfbuzz)
                      printf '%s\n' 'freetype'  ;;
            gnu-coreutils)
                      printf '%s\n' 'coreutils' ;;
            libmediainfo|mediainfo)
                      printf '%s\n' 'media-info';;
            tcl-core) printf '%s\n' 'tcl-tk'    ;;
            *)        printf '%s\n' "$1"
        esac
    }

    set -e

    cd "$MY_HOME_DIR/repos.d/offical/formula"

    for item in $(ls -1 *.yml | sed 's/\.yml$//')
    do
        __load_formula_of_the_given_package "$item"
        BREW_PKG_NMAE="$(get_brew_package_name_from_my_package_name $PACKAGE_NAME)"
        if brew info "$BREW_PKG_NMAE" > /dev/null 2>&1 ; then
            BREW_PKG_VERS=$(__pmw_get_available_package_version_by_package_name brew "$BREW_PKG_NMAE")
            if version_match "$BREW_PKG_VERS" gt "$PACKAGE_VERSION" ; then
                printf "${COLOR_RED}%-10s %-10s  |  %-10s %-10s${COLOR_OFF}\n" "$PACKAGE_NAME" "$PACKAGE_VERSION" "$BREW_PKG_NMAE" "$BREW_PKG_VERS"
            else
                :
                #printf "${COLOR_GREEN}%-10s %-10s  |  %-10s %-10s${COLOR_OFF}\n" "$PACKAGE_NAME" "$PACKAGE_VERSION" "$BREW_PKG_NMAE" "$BREW_PKG_VERS"
            fi
        else
            printf "${COLOR_BLUE}%-10s %-10s  |${COLOR_OFF}\n" "$PACKAGE_NAME" "$PACKAGE_VERSION"
        fi
    done
}

__show_or_open_homepage_of_the_given_package() {
    unset ACTION
    unset PACKAGE

    while [ -n "$1" ]
    do
        case $1 in
            --open)
                ACTION=open
                ;;
            -*|--*)
                die "unrecognized argument: 41"
                ;;
            *)  if [ -z "$PACKAGE" ] ; then
                    PACKAGE=$1
                else
                    die "too many packages given."
                fi
        esac
        shift
    done

    if [ "$ACTION" = open ] ; then
        __open_homepage_of_the_given_package $PACKAGE
    else
        __show_homepage_of_the_given_package $PACKAGE
    fi
}

__show_homepage_of_the_given_package() {
    if [ -z "$1" ] ; then
        PACKAGE_WEB_URL="$MY_HOME_PAGE"
    else
        __load_formula_of_the_given_package "$1"
    fi

    echo "$PACKAGE_WEB_URL"
}

__open_homepage_of_the_given_package() {
    if [ -z "$1" ] ; then
        PACKAGE_WEB_URL="$MY_HOME_PAGE"
    else
        __load_formula_of_the_given_package "$1"
    fi
    
    if command -v open > /dev/null ; then
        run "open '$PACKAGE_WEB_URL'"
    elif command -v termux-open-url > /dev/null ; then
        run "termux-open-url '$PACKAGE_WEB_URL'"
    else
        warn "I don't konw how to open"
    fi
}

__show_depends_of_the_given_package() {
    die_if_package_is_not_specified "$1"

    __gen_dependency_package_tree_of_the_given_package "$1"

    if [ -f "$PACKAGE_DEP_PKG_TREE_FILEPATH_TXT" ] ; then
        cat "$PACKAGE_DEP_PKG_TREE_FILEPATH_TXT"
    elif [ -f "$PACKAGE_DEP_PKG_TREE_FILEPATH_PNG" ] ; then
        for item in open feh eog lsix
        do
            if command -v $item > /dev/null && $item "$PACKAGE_DEP_PKG_TREE_FILEPATH_PNG" ; then
                return 0
            fi
        done
    elif [ -f "$PACKAGE_DEP_PKG_TREE_FILEPATH_DOT" ] ; then
        cat "$PACKAGE_DEP_PKG_TREE_FILEPATH_DOT"
    fi
}

__logs_the_given_installed_package() {
    die_if_package_is_not_installed "$1"

    if [ -z "$2" ] ; then
        die "please specify a abi."
    fi

    for ABI in $(cat "$MY_INSTALL_DIR/$1/installed-abis")
    do
        if [ "$ABI" = "$2" ] ; then
            break
        else
            unset ABI
        fi
    done

    if [ -z "$ABI" ] ; then
        die "unsupported abi: $1"
    fi

    if command -v bat > /dev/null ; then
        VIEWER=bat
    else
        VIEWER=less
    fi

    __logs_the_given_dir() {
        for item in $(ls "$1")
        do
            item="$1/$item"
            if [ -d "$item" ] ; then
                continue
            fi
            if [ "$VIEWER" = 'bat' ] ; then
                case $item in
                    *.png) ;;
                    *.yml|*/installed-metadata)
                        bat -l bash "$item" ;;
                    *)  bat "$item"
                esac
            else
                "$VIEWER" "$item"
            fi
        done
    }

    __logs_the_given_dir "$MY_INSTALL_DIR/$1"
    __logs_the_given_dir "$MY_INSTALL_DIR/$1/$2/share/log"

    if [ "$VIEWER" != 'bat' ] ; then
        prompt_user_to_install_bat
    fi
}

# examples:
# __pack_the_given_installed_package autoconf
# __pack_the_given_installed_package autoconf --type=tar.xz
__pack_the_given_installed_package() {
    set -e

    __load_installed_metadata_of_the_given_package "$1"

    shift

    unset PACKED_FILE_SUFFIX

    for arg in $@
    do
        case $arg in
            --type=*)
                PACKED_FILE_SUFFIX=$(getvalue $arg)
                if [ -z "$PACKED_FILE_SUFFIX" ] ; then
                    die "--type=<VALUE> , VALUE must not be empty."
                fi
                ;;
            *)  die "unrecognized argument: $arg"
        esac
    done

    if [ -z "$PACKED_FILE_SUFFIX" ] ; then
        if command -v 7za > /dev/null ; then
            PACKED_FILE_SUFFIX=7z
        elif command -v zip > /dev/null ; then
            PACKED_FILE_SUFFIX=zip
        elif command -v tar > /dev/null ; then
            if command -v xz > /dev/null ; then
                PACKED_FILE_SUFFIX=tar.xz
            elif command -v bzip2 > /dev/null ; then
                PACKED_FILE_SUFFIX=tar.bz2
            elif command -v gzip > /dev/null ; then
                PACKED_FILE_SUFFIX=tar.gz
            else
                handle_dependency required exe xz
                PACKED_FILE_SUFFIX=tar.xz
            fi
        else
            handle_dependency required exe zip
            PACKED_FILE_SUFFIX=tar.xz
        fi
    else
        case $PACKED_FILE_SUFFIX in
            7z) handle_dependency required exe 7za ;;
            zip)handle_dependency required exe zip ;;
            tar.gz)
                handle_dependency required exe tar
                handle_dependency required exe gzip
                ;;
            tar.xz)
                handle_dependency required exe tar
                handle_dependency required exe xz
                ;;
            tar.bz2)
                handle_dependency required exe tar 
                handle_dependency required exe bzip2 
                ;;
            *) die "unsupported type: $PACKED_FILE_SUFFIX, the supported types are 7z zip tar.gz tar.xz tar.bz2."
        esac
    fi

    unset PACKED_DIR_NAME
    unset PACKED_FILE_NAME

    PACKED_DIR_NAME="$INSTALLED_PKG_NAME-$INSTALLED_PKG_VERS-bin"
    PACKED_FILE_NAME="$PACKED_DIR_NAME.$PACKED_FILE_SUFFIX"

    step "create working directory"
    echo "$COLOR_PURPLE==>$COLOR_OFF ${COLOR_GREEN}mktemp -d$COLOR_OFF"
    WORKING_DIR=$(mktemp -d)

    step "change to working directory"
    run cd $WORKING_DIR

    step "make link refer to installed package root dir"
    run ln -s "$MY_INSTALL_DIR/$INSTALLED_PKG_NAME" "$PACKED_DIR_NAME"

    step "packing"
    case $PACKED_FILE_SUFFIX in
        7z)  run 7za a -t7z -r "$PACKED_FILE_NAME" "$PACKED_DIR_NAME/*" ;;
        zip) run zip -9 -r     "$PACKED_FILE_NAME" "$PACKED_DIR_NAME"   ;;
        tar.gz)  run tar zvcf  "$PACKED_FILE_NAME" "$PACKED_DIR_NAME/*" ;;
        tar.xz)  run tar Jvcf  "$PACKED_FILE_NAME" "$PACKED_DIR_NAME/*" ;;
        tar.bz2) run tar jvcf  "$PACKED_FILE_NAME" "$PACKED_DIR_NAME/*" ;;
    esac

    if [ ! -d "$MY_CACHED_BINARY_DIR" ] ; then
        step "create cached binary dir"
        run install -d "$MY_CACHED_BINARY_DIR"
    fi

    step "copy packed file to cached binary dir"
    run cp "$PACKED_FILE_NAME" "$MY_CACHED_BINARY_DIR/"

    step "show disk usage statistics"
    run "du -sh $PACKED_FILE_NAME | cut -f1"

    step "delete working directory"
    run rm -rf $WORKING_DIR
}

get_direct_dependency_package_list_of_the_given_package() {
    grep '^\s*package set dep\.pkg\s*".*"' $(__path_of_formula_of_the_given_package $1) | sed 's/.*package set dep\.pkg.*"\(.*\)"/\1/'
}

# $1 packageName, if packageName is not specified, USER_SPECIFIED_PACKAGE_LIST will be used
# $2=yes invoked by myself
__gen_dependency_package_list_of_the_given_package() {
    [ "$2" = yes ] || {
        unset I
        unset DEPENDENCY_PACKAGE_LIST
    }

    unset DIRECT_DEPENDENCY_PACKAGE_LIST
    if [ -z "$1" ] ; then
        DIRECT_DEPENDENCY_PACKAGE_LIST="$USER_SPECIFIED_PACKAGE_LIST"
    else
        DIRECT_DEPENDENCY_PACKAGE_LIST=$(get_direct_dependency_package_list_of_the_given_package "$1")
    fi

    for dependencyPkgName in $DIRECT_DEPENDENCY_PACKAGE_LIST
    do
        die_if_package_is_not_available "$dependencyPkgName"

        DEPENDENCY_PACKAGE_LIST_TEMP=""

        for item in $DEPENDENCY_PACKAGE_LIST
        do
            if [ "$dependencyPkgName" = "$item" ] ; then
                continue
            else
                DEPENDENCY_PACKAGE_LIST_TEMP="$DEPENDENCY_PACKAGE_LIST_TEMP $item"
            fi
        done

        DEPENDENCY_PACKAGE_LIST="$dependencyPkgName $DEPENDENCY_PACKAGE_LIST_TEMP"

        __gen_dependency_package_list_of_the_given_package "$dependencyPkgName" yes
    done
}

__get_dot_file_contents() {
    for PKG in $@
    do
        unset DIRECT_DEPENDENCY_PACKAGE_LIST
        DIRECT_DEPENDENCY_PACKAGE_LIST="$(get_direct_dependency_package_list_of_the_given_package "$PKG")"
        if [ -n "$DIRECT_DEPENDENCY_PACKAGE_LIST" ] ; then
            printf '"%s" -> { "%s" }\n' "$PKG" "$(printf '%s\n' "$DIRECT_DEPENDENCY_PACKAGE_LIST" | sed 's/ /" "/g')"
            __get_dot_file_contents $DIRECT_DEPENDENCY_PACKAGE_LIST
        fi
    done
}

# __gen_dependency_package_tree_of_the_given_package <PKG> [OUTPUT-DIR]
__gen_dependency_package_tree_of_the_given_package() {
    unset DIRECT_DEPENDENCY_PACKAGE_LIST
    DIRECT_DEPENDENCY_PACKAGE_LIST="$(get_direct_dependency_package_list_of_the_given_package "$1")"

    if [ -z "$DIRECT_DEPENDENCY_PACKAGE_LIST" ] ; then
        return 0
    fi

    unset PACKAGE_DEP_PKG_TREE_OUTPUT_DIR

    if [ -z "$2" ] ; then
        PACKAGE_DEP_PKG_TREE_OUTPUT_DIR=$(mktemp -d) || return 1
    else
        PACKAGE_DEP_PKG_TREE_OUTPUT_DIR="$2"
        [ -d "$2" ] || install -d "$2"
    fi

    unset PACKAGE_DEP_PKG_TREE_FILEPATH_DOT
    unset PACKAGE_DEP_PKG_TREE_FILEPATH_PNG
    unset PACKAGE_DEP_PKG_TREE_FILEPATH_TXT

    PACKAGE_DEP_PKG_TREE_FILEPATH_DOT="$PACKAGE_DEP_PKG_TREE_OUTPUT_DIR/dependencies.gv"
    PACKAGE_DEP_PKG_TREE_FILEPATH_PNG="$PACKAGE_DEP_PKG_TREE_OUTPUT_DIR/dependencies.png"
    PACKAGE_DEP_PKG_TREE_FILEPATH_TXT="$PACKAGE_DEP_PKG_TREE_OUTPUT_DIR/dependencies.txt"

    printf 'digraph G {\n'       >  "$PACKAGE_DEP_PKG_TREE_FILEPATH_DOT"
    __get_dot_file_contents "$1" >> "$PACKAGE_DEP_PKG_TREE_FILEPATH_DOT"
    printf '}\n'                 >> "$PACKAGE_DEP_PKG_TREE_FILEPATH_DOT"

    if command -v dot > /dev/null ; then
        run dot -Tpng -o "$PACKAGE_DEP_PKG_TREE_FILEPATH_PNG" "$PACKAGE_DEP_PKG_TREE_FILEPATH_DOT"
    else
        note "graphviz is not installed. we do not generate png format dependency image."
    fi

    # https://github.com/ggerganov/dot-to-ascii
    curl \
        -o "$PACKAGE_DEP_PKG_TREE_FILEPATH_TXT" \
        -s \
        -G \
        --data-urlencode "boxart=1" \
        --data-urlencode "src=$(cat $PACKAGE_DEP_PKG_TREE_FILEPATH_DOT)" \
        "https://dot-to-ascii.ggerganov.com/dot-to-ascii.php" || true
}

__config_native_toolchain_environment_variables() {
    for TOOLNAME in $(list_tools_in_the_toolchain)
    do
        unset TOOLPATH

        case $TOOLNAME in
            cc)  TOOLPATH="$(command -v cc  || command -v gcc || command -v clang   || true)" ;;
            cxx) TOOLPATH="$(command -v c++ || command -v g++ || command -v clang++ || true)" ;;
            *)   TOOLPATH="$(command -v "$TOOLNAME" || true)"
        esac

        unset TOOLNAME_UPPERCASE
        TOOLNAME_UPPERCASE=$(printf '%s\n' "$TOOLNAME" | tr a-z A-Z)

        eval export "${TOOLNAME_UPPERCASE}='$TOOLPATH'"
        eval export "${TOOLNAME_UPPERCASE}_FOR_BUILD='$TOOLPATH'"
    done

    unset TOOLNAME_UPPERCASE
    unset TOOLNAME
    unset TOOLPATH

    for FLAG in $(list_flags_used_by_tools_in_the_toolchain)
    do
        eval export "${FLAG}_FOR_BUILD=\"\$$FLAG\""
    done
    unset FLAG
}

__install_the_given_packages() {
    inspect_install_arguments $@

    die_if_package_is_not_specified $USER_SPECIFIED_PACKAGE_LIST

    __config_native_toolchain_environment_variables

    __gen_dependency_package_list_of_the_given_package || return 1

    if [ $(list_length $DEPENDENCY_PACKAGE_LIST) -gt 1 ] ; then
        echo "$COLOR_PURPLE==>$COLOR_OFF to install$COLOR_GREEN $DEPENDENCY_PACKAGE_LIST $COLOR_OFF\n"
    fi

    for INSTALLING_PACKAGE in $DEPENDENCY_PACKAGE_LIST
    do
        if is_package_installed "$INSTALLING_PACKAGE" ; then
            if [ "$LOG_LEVEL" -gt "$LOG_LEVEL_QUIET" ] ; then
                printf "$COLOR_GREEN%-10s$COLOR_OFF already have been installed.\n" "$INSTALLING_PACKAGE"
            fi
        else
            (__install_the_given_package "$INSTALLING_PACKAGE") || return 1
        fi
    done
}

# Note: this function must run in a subshell
__install_the_given_package() {
    echo "${COLOR_PURPLE}=============== Installing ${COLOR_OFF}${COLOR_GREEN}${1}${COLOR_OFF}${COLOR_PURPLE} ===============${COLOR_OFF}"

    # brew install meson
    # Error: The current work directory doesn't exist, cannot proceed.
    # beacuse previous package's work direcotory is deleted.
    cd ~ || return 1

    unset PACKAGE_WORKING_DIR
    unset PACKAGE_SRC_DIR
    unset PACKAGE_BSCRIPT_DIR

    unset NATIVE_BUILD_DIR
    unset NATIVE_INSTALL_DIR

    unset CONFIG_XX_UPDATED
    unset STEP_NUM

    unset TARGET_INDEX
    unset TARGET_ITEM

    __install_the_given_package_on_exit() {
        is_package_installed "$INSTALLING_PACKAGE" && return 0

        if [ -z "$PACKAGE_WORKING_DIR" ] ; then
            die "install $INSTALLING_PACKAGE failed!"
        else
            if [ "$DRYRUN" = yes ] ; then
                return 0
            fi
            if [ -z "$TARGET_ITEM" ] ; then
                die "install $INSTALLING_PACKAGE failed! you can go to $PACKAGE_WORKING_DIR to see see."
            else
                die "install $INSTALLING_PACKAGE/$TARGET_ITEM failed! you can go to $PACKAGE_WORKING_DIR to see see."
            fi
        fi
    }

    trap __install_the_given_package_on_exit EXIT

    __setup_PATH_env

    step "view formula"
    __view_formula_of_the_given_package "$1" --paging=never

    step "load formula"
    __load_formula_of_the_given_package "$1"

    if [ "$PACKAGE_DEP_JDK" = yes ] ; then
        step "find Java Development Kit"
        install_jdk_if_needed
    fi

    if [ "$PACKAGE_DEP_SDK" = yes ] ; then
        step "find Android SDK"
        install_android_sdk_if_needed
    fi

    if [ "$PACKAGE_DEP_NDK" = yes ] ; then
        step "find Android NDK"
        setup_build_toolchains_env
    fi

    calculate_TARGET_OS_VERS "$PACKAGE_NAME" "$PACKAGE_SDK_API" "$USER_EXPECTED_TARGET_OS_VERS"

    if [ "$CCACHE_ENABLED" = yes ] ; then
        package add dep.cmd ccache
    fi

    step "handle required dependencies"
    for item in $PACKAGE_DEP_CMD
    do
        handle_dependency $(__parse_require_dependency_item exe "$item") || return 1
    done
    for item in $PACKAGE_DEP_PYM
    do
        handle_dependency $(__parse_require_dependency_item pym "$item") || return 1
    done
    for item in $PACKAGE_DEP_PLM
    do
        handle_dependency $(__parse_require_dependency_item plm "$item") || return 1
    done

    step "printf required dependencies"
    __printf_dependency TYPE NAME OP EXPECT ACTUAL LOCATION
    for item in $PACKAGE_DEP_CMD
    do
        printf_dependency $(__parse_require_dependency_item exe "$item")
    done
    for item in $PACKAGE_DEP_PYM
    do
        printf_dependency $(__parse_require_dependency_item pym "$item")
    done
    for item in $PACKAGE_DEP_PLM
    do
        printf_dependency $(__parse_require_dependency_item plm "$item")
    done

    unset PKG_CONFIG
    unset CCACHE
    unset MESON
    unset CMAKE
    unset GMAKE
    unset NINJA

    PKG_CONFIG=$(command -v pkg-config || true)
    CCACHE=$(command -v ccache || true)
    MESON=$(command -v meson || true)
    CMAKE=$(command -v cmake || true)
    GMAKE=$(command -v gmake || command -v make || true)
    NINJA=$(command -v ninja || true)

    if [ "$CCACHE_ENABLED" = yes ] && [ -z "$CCACHE" ] ; then
        die "ccache is not installed."
    fi

    PERL_HOME=$(__get_perl_home)
    if [ -n "$PERL_HOME" ] ; then
        bppend_to_PATH "$PERL_HOME/bin"
    fi

    PACKAGE_WORKING_DIR="$MY_HOME_DIR/build.d/$1"
    PACKAGE_SRC_DIR="$PACKAGE_WORKING_DIR/src"

    step "create working directory"
    if [ -d "$PACKAGE_WORKING_DIR" ] ; then
        run rm -rf "$PACKAGE_WORKING_DIR"
    fi
    run install -d "$PACKAGE_WORKING_DIR"

    step "calculate dependency packages"
    unset DEPENDENCY_PACKAGE_LIST
    if [ -z "$PACKAGE_DEP_PKG" ] ; then
        note "no dependency packages."
    else
        __gen_dependency_package_list_of_the_given_package "$1"                      || return 1
        __gen_dependency_package_tree_of_the_given_package "$1" "$MY_INSTALL_DIR/$1" || return 1
        if [ -f "$PACKAGE_DEP_PKG_TREE_FILEPATH_TXT" ] ; then
            cat "$PACKAGE_DEP_PKG_TREE_FILEPATH_TXT"
        fi
    fi

    step "create common linker script"
    create_common_linker_script "$PACKAGE_WORKING_DIR"

    step "create common include.h"
    unset COMMON_INCLUDE_H_FILEPATH
    COMMON_INCLUDE_H_FILEPATH="$PACKAGE_WORKING_DIR/include.h"
    create_common_include_h "$COMMON_INCLUDE_H_FILEPATH"
    if command -v bat > /dev/null ; then
        run bat --style=plain --paging=never "$COMMON_INCLUDE_H_FILEPATH"
    else
        run cat "$COMMON_INCLUDE_H_FILEPATH"
    fi

    step "fetch sources if needed"
    __fetch_sources_of_the_given_package "$1" || return 1

    step "fetch patches if needed"
    __fetch_patches_of_the_given_package "$1" || return 1

    case $PACKAGE_SRC_URL in
        dir://*)
            if [ -d "$PACKAGE_SRC_PATH" ] ; then
                if command -v git > /dev/null ; then
                    PACKAGE_GIT_REV=$(cd "$PACKAGE_SRC_PATH" && git rev-parse HEAD || true)
                fi

                step "create the directory where source files will be copied to"
                run install -d "$PACKAGE_SRC_DIR" || return 1

                step "copy source files to the directory i just created"
                run cp -r "$PACKAGE_SRC_PATH/." "$PACKAGE_SRC_DIR" || return 1
            else
                die "src.url point to dir is not exist."
            fi
            ;;
        *.git)
            if [ -z "$PACKAGE_GIT_REV" ] ; then
                PACKAGE_GIT_REV=$(cd "$PACKAGE_SRC_PATH" && git rev-parse HEAD) || return 1
            fi

            step "create the directory where source files will be copied to"
            run install -d "$PACKAGE_SRC_DIR" || return 1

            step "copy source files to the directory i just created"
            run cp -r "$PACKAGE_SRC_PATH/." "$PACKAGE_SRC_DIR" || return 1
            ;;
        *.c|*.cc|*.cxx|*.cpp)
            step "create the directory where source files will be copied to"
            run install -d "$PACKAGE_SRC_DIR" || return 1

            step "copy source files to the directory i just created"
            run cp    "$PACKAGE_SRC_PATH"   "$PACKAGE_SRC_DIR" || return 1
            ;;
        *.zip)
            step "create the directory where source file will be uncompressed to"
            run install -d "$PACKAGE_SRC_DIR" || return 1

            step "uncompressed source file to the directory i just created"
            run unzip "$PACKAGE_SRC_PATH" -d "$PACKAGE_SRC_DIR" || return 1
            ;;
        *.tar.xz|*.tar.gz|*.tar.lz|*.tar.bz2|*.tgz|*.txz)
            step "create the directory where source file will be uncompressed to"
            run install -d "$PACKAGE_SRC_DIR" || return 1

            step "uncompressed source file to the directory i just created"
            run tar xf "$PACKAGE_SRC_PATH" -C "$PACKAGE_SRC_DIR" --strip-components 1 || return 1
            ;;
        *)  die "unrecognized extension : $PACKAGE_SRC_URL. the supported extensions are .zip .tar.xz .tar.gz .tar.lz .tar.bz2 .tgz .txz"
    esac

    step "change to source directory"
    run cd "$PACKAGE_SRC_DIR" || return 1

    step "list files of source directory"
    run ls -l

    if [ -z "$PACKAGE_BSCRIPT" ] ; then
        PACKAGE_BSCRIPT_DIR="$PACKAGE_SRC_DIR"
    else
        PACKAGE_BSCRIPT_DIR="$PACKAGE_SRC_DIR/$PACKAGE_BSCRIPT"
    fi

    step "build for native"
    if command -v build0 > /dev/null ; then
        NATIVE_BUILD_DIR="$PACKAGE_WORKING_DIR/native"
        NATIVE_INSTALL_DIR="$MY_HOME_DIR/native/$PACKAGE_NAME"

        if [ -f "$NATIVE_INSTALL_DIR/version.txt" ] ; then
            if [ "$(cat "$NATIVE_INSTALL_DIR/version.txt")" != "$PACKAGE_VERSION" ] ; then
                warn "build for native already have been done, but not same version. we will remove and rebuild it."
                run rm -rf "$NATIVE_INSTALL_DIR"
            fi
        fi

        if [ -f "$NATIVE_INSTALL_DIR/version.txt" ] ; then
            note "build for native already have been done, skipped."
        else
            [ "$PACKAGE_BUILD_IN_BSCRIPT_DIR" = yes ] || {
                run install -d "$NATIVE_BUILD_DIR" || return 1
                run cd         "$NATIVE_BUILD_DIR" || return 1
            }

            for TOOL in PKG_CONFIG MESON CMAKE GMAKE NINJA
            do
                printf "%19s = %s\n" "$TOOL" "$(eval echo \$$TOOL)"
            done

            echo

            for TOOL in $(list_tools_in_the_toolchain | tr a-z A-Z)
            do
                eval export "$TOOL=\"\$${TOOL}_FOR_BUILD\""
                printf "%19s = %s\n" "$TOOL" "$(eval echo \$$TOOL)"
            done

            for FLAG in $(list_flags_used_by_tools_in_the_toolchain)
            do
                eval export "$FLAG=\"\$${FLAG}_FOR_BUILD\""
                printf "\n%19s = " "$FLAG"
                FIRST=yes
                for item in $(eval echo \$$FLAG | tr ':' ' ')
                do
                    if [ "$FIRST" = yes ] ; then
                        FIRST=no
                        echo "$item"
                    else
                        echo "                      $item"
                    fi
                done
            done
            echo
            printf "\n%19s = " PATH
            FIRST=yes
            for item in $(printf '%s\n' "$PATH" | tr ' ' '|' | tr ':' ' ')
            do
                if [ "$FIRST" = yes ] ; then
                    FIRST=no
                    printf '%s\n' "$item" | tr '|' ' '
                else
                    printf '%s\n' "                      $item" | tr '|' ' '
                fi
            done

            cat <<EOF

        BUILD_NJOBS = $BUILD_NJOBS

PACKAGE_WORKING_DIR = $PACKAGE_WORKING_DIR
PACKAGE_SRC_DIR     = $PACKAGE_SRC_DIR
PACKAGE_BSCRIPT_DIR = $PACKAGE_BSCRIPT_DIR

 NATIVE_BUILD_DIR   = $NATIVE_BUILD_DIR
 NATIVE_INSTALL_DIR = $NATIVE_INSTALL_DIR

                PWD = $PWD

EOF

            run build0 || return 1

            echo "$PACKAGE_VERSION" > "$NATIVE_INSTALL_DIR/version.txt"

            if [ -d "$NATIVE_INSTALL_DIR/bin" ] ; then
                export PATH="$NATIVE_INSTALL_DIR/bin:$PATH"
            fi
        fi
    else
        note "no build0  function defined in formula, skipped."
    fi

    if [ "$CCACHE_ENABLED" = yes ] ; then
        ccache -s > "$PACKAGE_WORKING_DIR/ccache-s.txt"
    fi

    step "do some preparation works"
    if command -v prepare > /dev/null ; then
        if [ "$PWD" != "$PACKAGE_BSCRIPT_DIR" ] ; then
            run cd "$PACKAGE_BSCRIPT_DIR" || return 1
        fi
        prepare "$1" || return 1
    else
        case $PACKAGE_BUILD_SYSTEM in
            autogen)
                note "no prepare function defined in formula."
                run NOCONFIGURE=yes ./autogen.sh    || return 1
                ;;
            autotools)
                note "no prepare function defined in formula."
                run autoreconf -ivf || return 1
                ;;
            *)  note "no prepare function defined in formula, skipped."
        esac
    fi

    for TARGET_ITEM in $TARGET_LIST
    do
        TARGET_INDEX=$(expr ${TARGET_INDEX-0} + 1)
        step "${COLOR_PURPLE}Installing ${COLOR_OFF}${COLOR_GREEN}$1 $TARGET_ITEM${COLOR_OFF}"
        (__install_the_given_package_for_the_given_target "$1" "$TARGET_ITEM") || return 1
    done

    [ "$DRYRUN" = yes ] && exit

    step "record installed abis"
    run cp "$PACKAGE_WORKING_DIR/installed-abis" "$MY_INSTALL_DIR/$1/installed-abis"

    step "record installed metadata"
    __record_installed_metadata_of_the_given_package "$1"

    step "record installed files"
    __record_installed_files_of_the_given_package "$1"

    if [ "$CCACHE_ENABLED" = yes ] ; then
        step "show ccache statistics summary"
        info "Before Build:"
        run  cat "$PACKAGE_WORKING_DIR/ccache-s.txt"
        info "After  Build:"
        run  ccache -s
    fi

    [ "$KEEP_WORKING_DIR" = yes ] || {
        step "clean working directory."
        run rm -rf "$PACKAGE_WORKING_DIR"
    }

    echo
    success "$1 installed successfully."

    if [ "$NEED_RUN_TREE" = yes ] ; then
        unset STEP_NUM
        echo
        echo "${COLOR_GREEN}$_0 tree $1 $TREE_ARGS${COLOR_OFF}"
        __tree_the_given_installed_package "$1" $TREE_ARGS
    fi

    if [ "$NEED_RUN_PACK" = yes ] ; then
        unset STEP_NUM
        echo
        echo "${COLOR_GREEN}$_0 pack $1 $PACK_ARGS${COLOR_OFF}"
        __pack_the_given_installed_package "$1" $PACK_ARGS
    fi
}

__install_the_given_package_for_the_given_target() {
    unset STEP2_NUM

    step2 "config variables for ${COLOR_GREEN}$@${COLOR_OFF}"
    __config_variables_for_the_given_target $@

    step2 "printf variables for ${COLOR_GREEN}$@${COLOR_OFF}"
    __printf_variables_for_the_given_target $@

    step2 "create needed directories for ${COLOR_GREEN}$@${COLOR_OFF}"
    run install -d "$TARGET_WORKING_DIR/build"   || return 1
    run install -d "$TARGET_WORKING_DIR/include" || return 1
    run install -d "$TARGET_WORKING_DIR/lib"     || return 1
    run install -d "$TARGET_WORKING_DIR/bin"     || return 1

    step2 "create symbolic link for CC and CXX to use ccache"
    if [ "$CCACHE_ENABLED" = yes ] ; then
        run ln -s "$CCACHE" "$TARGET_WORKING_DIR/bin/clang"
        run ln -s "$CCACHE" "$TARGET_WORKING_DIR/bin/clang++"
        run export CC="$TARGET_WORKING_DIR/bin/clang"
        run export CXX="$TARGET_WORKING_DIR/bin/clang++"
        run export CPP="'$CC -E'"
        run export PATH="'$TARGET_WORKING_DIR/bin:$PATH'"
    else
        note "ccache is disabled, skipped."
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_CMAKE" = yes ] ; then
        step2 "create cmake toolchain file for ${COLOR_GREEN}$@${COLOR_OFF}"
        __create_cmake_toolchain_file_for_the_given_target $@ || return 1
    fi

    if [ "$PACKAGE_BUILD_IN_BSCRIPT_DIR" = yes ] ; then
        if [ "$PWD" != "$PACKAGE_BSCRIPT_DIR" ] ; then
            run cd "$PACKAGE_BSCRIPT_DIR" || return 1
        fi
    else
        run cd "$TARGET_BUILD_DIR" || return 1
    fi

    [ "$DRYRUN" = yes ] && {
        [ -z "$SHELL" ] && SHELL=$(command -v zsh || command -v bash || command -v sh)
        [ -z "$SHELL" ] && SHELL=sh
        exec "$SHELL" || return 1
    }

    [ -d "$TARGET_INSTALL_DIR" ] && run rm -rf "$TARGET_INSTALL_DIR"

    step2 "build for ${COLOR_GREEN}$@${COLOR_OFF}"

    if [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] ; then
        run rustup target add "$RUST_TARGET" || return 1
    fi

    if command -v build > /dev/null ; then
        build $@ || return 1
    else
        {
            case $PACKAGE_BUILD_SYSTEM in
                autogen)   configure ;;
                autotools) configure ;;
                configure) configure ;;
                cmake*)    cmakew ;;
                meson)     mesonw ;;
                ninja)     ninja clean && ninja && ninja install ;;
                make)      makew clean && makew && makew install ;;
                cargo)     cargow install ;;
                go)        gow ;;
            esac
        } || return 1
    fi

    [ -d "$TARGET_INSTALL_DIR" ] || {
        error "installed nothing."
        return 1
    }




    step2 "justfy .la files for ${COLOR_GREEN}$@${COLOR_OFF}"
    __justfy_la_files_for_the_given_target $@ || return 1

    step2 "justfy .pc files for ${COLOR_GREEN}$@${COLOR_OFF}"
    __justfy_pc_files_for_the_given_target $@ || return 1

    step2 "install logs for ${COLOR_GREEN}$@${COLOR_OFF}"
    __install_logs_for_the_given_target $@ || return 1

    run "echo '$TARGET_OS_ABI' >> $PACKAGE_WORKING_DIR/installed-abis"
}

__justfy_la_files_for_the_given_target() {
    if [ -d "$TARGET_INSTALL_DIR/lib" ] ; then
        for lafile in $(find "$TARGET_INSTALL_DIR/lib" -name "*.la")
        do
            sed_in_place "s|-L$SYSTEM_LIBRARY_DIR||" "$lafile" || return 1
        done
    fi
}

__justfy_pc_files_for_the_given_target() {
    if [ -d "$TARGET_INSTALL_DIR/lib/pkgconfig" ] ; then
        for pcfile in $(find "$TARGET_INSTALL_DIR/lib/pkgconfig" -name "*.pc")
        do
            sed_in_place "s|$TARGET_INSTALL_DIR|\${pcfiledir}/../..|g" "$pcfile" || return 1

            if grep 'Libs.private:' "$pcfile" > /dev/null ; then
                LIBS_CONTENT=$(awk '/Libs:/{print}' "$pcfile" || return 1)
                LIBS_PRIVATE_CONTENT=$(awk -F: '/Libs.private:/{print $2}' "$pcfile" || return 1)
                sed_in_place "s|$LIBS_CONTENT|$LIBS_CONTENT$LIBS_PRIVATE_CONTENT|" "$pcfile" || return 1
                sed_in_place '/Libs.private/d' "$pcfile" || return 1
            fi
        done
    fi
}

__install_pc_file_if_needed_for_the_given_target() {
    if [ -d "$TARGET_INSTALL_DIR/lib" ] ; then
        if [ ! -d "$TARGET_INSTALL_DIR/lib/pkgconfig" ] ; then
            cat > "$TARGET_BUILD_DIR/$1.pc" << EOF
EOF
            run install_pcfs "$TARGET_BUILD_DIR/$1.pc"
        fi
    fi
}

__install_logs_for_the_given_target() {
    TARGET_LOG_DIR="$TARGET_INSTALL_DIR/share/log"

    for item in "$TARGET_BUILD_DIR" "$PACKAGE_BSCRIPT_DIR"
    do
        for item2 in 'config.log' 'compile_commands.json' 'install.log.txt'
        do
            if [ -f "$item/$item2" ] ; then
                echo "-- Installing: $TARGET_LOG_DIR/$item2"
                [ -d "$TARGET_LOG_DIR" ] || run install -d "$TARGET_LOG_DIR"
                install -m 644 "$item/$item2" "$TARGET_LOG_DIR" || return 1
            fi
        done
    done
}

install_incs() {
    while [ -n "$1" ]
    do
        unset X1
        unset X2
        X1=$(echo "$1" | cut -d: -f1)
        X2=$(echo "$1" | cut -d: -f2)

        if [ "$X1" = "$X2" ] ; then
            unset X2
        fi

        install -v -d         "$TARGET_INSTALL_DIR/include/$X2" || return 1
        install -v -m 644 $X1 "$TARGET_INSTALL_DIR/include/$X2" || return 1

        shift
    done
}

install_libs() {
    install -v -d "$TARGET_INSTALL_DIR/lib" || return 1
    for item in $@
    do
        case $item in
            *.a) install -v -m 644 $item "$TARGET_INSTALL_DIR/lib" || return 1 ;;
            *)   install -v -m 755 $item "$TARGET_INSTALL_DIR/lib" || return 1 ;;
        esac
    done
}

install_pcfs() {
    install -v -d        "$TARGET_INSTALL_DIR/lib/pkgconfig" &&
    install -v -m 644 $@ "$TARGET_INSTALL_DIR/lib/pkgconfig"
}

install_bins() {
    install -v -d        "$TARGET_INSTALL_DIR/bin" &&
    install -v -m 755 $@ "$TARGET_INSTALL_DIR/bin"
}

install_etcs() {
    install -v -d        "$TARGET_INSTALL_DIR/etc" &&
    install -v -m 644 $@ "$TARGET_INSTALL_DIR/etc"
}

install_mans() {
    for item in $@
    do
        unset NUMBER
        NUMBER=$(echo "$item" | cut -c ${#item}-${#item})
        case $NUMBER in
            [1-8]);;
            *)    die "$item: not a manpage."
        esac
        install -v -d           "$TARGET_INSTALL_DIR/share/man/man$NUMBER" &&
        install -v -m 644 $item "$TARGET_INSTALL_DIR/share/man/man$NUMBER"
    done
}

install_pc_file() {
    install -v -d "$TARGET_INSTALL_DIR/lib/pkgconfig" &&
    cat >         "$TARGET_INSTALL_DIR/lib/pkgconfig/$1.pc"
}

__show_infomation_of_all_available_packages() {
    shift

    unset OUTPUT_FORMAT

    while [ -n "$1" ]
    do
        case $1 in
            --json) OUTPUT_FORMAT=json ;;
            *)      die "unrecognized argument: $1"
        esac
        shift
    done

    unset I
    unset PACKAGE_LIST
    unset PACKAGE_LIST_LENGTH

    PACKAGE_LIST=$(__list_available_packages) || return 1
    PACKAGE_LIST_LENGTH=$(list_length $PACKAGE_LIST)

    if [ "$OUTPUT_FORMAT" = 'json' ] ; then
        for PACKAGE in $PACKAGE_LIST
        do
            __load_formula_of_the_given_package "$PACKAGE"

            I=$(expr ${I-0} + 1)

            if [ "$I" -eq 1 ] ; then
                echo "["
            fi

            if [ "$I" -eq "$PACKAGE_LIST_LENGTH" ] ; then
                printf "{\"name\":\"%s\",\"version\":\"%s\",\"summary\":\"%s\",\"license\":\"%s\",\"webpage\":\"%s\",\"bsystem\":\"%s\",\"git_url\":\"%s\"}]\n"  "$PACKAGE_NAME" "$PACKAGE_VERSION" "$PACKAGE_SUMMARY" "$PACKAGE_LICENSE" "$PACKAGE_WEB_URL" "$PACKAGE_BUILD_SYSTEM" "$PACKAGE_GIT_URL"
            else
                printf "{\"name\":\"%s\",\"version\":\"%s\",\"summary\":\"%s\",\"license\":\"%s\",\"webpage\":\"%s\",\"bsystem\":\"%s\",\"git_url\":\"%s\"},\n"  "$PACKAGE_NAME" "$PACKAGE_VERSION" "$PACKAGE_SUMMARY" "$PACKAGE_LICENSE" "$PACKAGE_WEB_URL" "$PACKAGE_BUILD_SYSTEM" "$PACKAGE_GIT_URL"
            fi
        done
    else
        for PACKAGE in $PACKAGE_LIST
        do
            I=$(expr ${I-0} + 1)

            if [ "$I" -gt 1 ] ; then
                echo "============================================================"
            fi

            __show_infomation_of_the_given_package "$PACKAGE"
        done
    fi
}

# __show_infomation_of_the_given_package_as_shell <PACKAGE-NAME>
__show_infomation_of_the_given_package_as_shell() {
    __load_formula_of_the_given_package "$1" || return 1

    while read KEY
    do
        printf "%s='%s'\n" "$KEY" "$(eval echo \$$KEY)"
    done <<EOF
PACKAGE_NAME
PACKAGE_SUMMARY
PACKAGE_WEB_URL
PACKAGE_GIT_URL
PACKAGE_GIT_REV
PACKAGE_GIT_TAG
PACKAGE_SRC_URL
PACKAGE_SRC_SUM
PACKAGE_SRC_NAME
PACKAGE_SRC_PATH
PACKAGE_SRC_TYPE
PACKAGE_FIX_URL
PACKAGE_FIX_SUM
PACKAGE_FIX_NAME
PACKAGE_FIX_PATH
PACKAGE_FIX_TYPE
PACKAGE_VERSION
PACKAGE_VERSION_MAJOR
PACKAGE_VERSION_MINOR
PACKAGE_VERSION_PATCH
PACKAGE_VERSION_TWEAK
PACKAGE_LICENSE
PACKAGE_BSCRIPT
PACKAGE_BSYSTEM
PACKAGE_BINBSTD
PACKAGE_BUILD_SYSTEM
PACKAGE_BUILD_SYSTEM_GO
PACKAGE_BUILD_SYSTEM_RAKE
PACKAGE_BUILD_SYSTEM_NINJA
PACKAGE_BUILD_SYSTEM_GMAKE
PACKAGE_BUILD_SYSTEM_CMAKE
PACKAGE_BUILD_SYSTEM_XMAKE
PACKAGE_BUILD_SYSTEM_MESON
PACKAGE_BUILD_SYSTEM_CARGO
PACKAGE_BUILD_SYSTEM_AUTOGENSH
PACKAGE_BUILD_SYSTEM_AUTOTOOLS
PACKAGE_BUILD_SYSTEM_CONFIGURE
PACKAGE_BUILD_SYSTEM_NDK_BUILD
PACKAGE_BUILD_IN_BSCRIPT_DIR
PACKAGE_BUILD_IN_PARALLEL
PACKAGE_DEP_CMD
PACKAGE_DEP_PYM
PACKAGE_DEP_PLM
PACKAGE_DEP_PKG
PACKAGE_DEP_JDK
PACKAGE_DEP_SDK
PACKAGE_DEP_NDK
PACKAGE_CDEFINE
PACKAGE_CCFLAGS
PACKAGE_XXFLAGS
PACKAGE_LDFLAGS
PACKAGE_FORMULA_FILEPATH
PACKAGE_SDK_API
EOF
}

# examples:
# __show_infomation_of_the_given_package curl
# __show_infomation_of_the_given_package curl --json
# __show_infomation_of_the_given_package curl --shell
# __show_infomation_of_the_given_package curl version
# __show_infomation_of_the_given_package curl webpage
__show_infomation_of_the_given_package() {
    set -e

    if [ $# -eq 0 ] ; then
        die_if_package_is_not_specified
    fi

    if [ $# -gt 2 ] ; then
        die "too many arguments."
    fi

    if [ $# -eq 2 ] ; then
        case $2 in
            --json)
                __load_formula_of_the_given_package "$1"
                printf "{\"name\":\"%s\",\"version\":\"%s\",\"summary\":\"%s\",\"license\":\"%s\",\"webpage\":\"%s\",\"bsystem\":\"%s\",\"git_url\":\"%s\"}\n"  "$PACKAGE_NAME" "$PACKAGE_VERSION" "$PACKAGE_SUMMARY" "$PACKAGE_LICENSE" "$PACKAGE_WEB_URL" "$PACKAGE_BUILD_SYSTEM" "$PACKAGE_GIT_URL"
                ;;
            --shell)
                __show_infomation_of_the_given_package_as_shell "$1"
                ;;
            formula)
                __path_of_formula_of_the_given_package "$1"
                ;;
            installed-dir)
                die_if_package_is_not_installed "$1"
                echo "$MY_INSTALL_DIR/$1"
                ;;
            installed-abis)
                die_if_package_is_not_installed "$1"
                cat "$MY_INSTALL_DIR/$1/installed-abis"
                ;;
            installed-metadata)
                die_if_package_is_not_installed "$1"
                cat "$MY_INSTALL_DIR/$1/installed-metadata"
                ;;
            installed-files)
                die_if_package_is_not_installed "$1"
                cat "$MY_INSTALL_DIR/$1/installed-files"
                ;;
            installed-datetime-unix)
                __load_installed_metadata_of_the_given_package "$1"
                echo "$INSTALLED_DATETIME"
                ;;
            installed-datetime-formatted)
                __load_installed_metadata_of_the_given_package "$1"
                format_unix_timestamp "$INSTALLED_DATETIME" '+%Y/%m/%d %H:%M:%S'
                ;;
            installed-pkg-version)
                __load_installed_metadata_of_the_given_package "$1"
                echo "$INSTALLED_PKG_VERS"
                ;;
            *)  package get "$1" "$2"
        esac
        return $?
    fi

    __load_formula_of_the_given_package "$1"

    echo "name    : $(mark_is_package_installed_or_not $1)"

    if [ -n "$PACKAGE_VERSION" ] ; then
        echo "version : $PACKAGE_VERSION"
    fi

    echo "summary : $PACKAGE_SUMMARY"
    echo "webpage : $PACKAGE_WEB_URL"

    [ -z "$PACKAGE_DEP_PKG" ] || {
        unset DEPENDENCIES

        for dependencyPkgName in $PACKAGE_DEP_PKG
        do
            if [ -z "$DEPENDENCIES" ] ; then
                DEPENDENCIES="depends : $(mark_is_package_installed_or_not $dependencyPkgName)"
            else
                DEPENDENCIES="$DEPENDENCIES | $(mark_is_package_installed_or_not $dependencyPkgName)"
            fi
        done

        echo "$DEPENDENCIES"
    }

    echo "src_url : $PACKAGE_SRC_URL"

    case $PACKAGE_SRC_TYPE in
        dir) ;;
        git)
            if [ -d "$PACKAGE_SRC_PATH" ] ; then
                echo "src_cache ${COLOR_PURPLE}==>${COLOR_OFF} $PACKAGE_SRC_PATH"
            else
                echo "src_cache : ${COLOR_RED}Not cached${COLOR_OFF}"
            fi
            ;;
        *)
            if [ -f "$PACKAGE_SRC_PATH" ] ; then
                echo "src_cache ${COLOR_PURPLE}==>${COLOR_OFF} $PACKAGE_SRC_PATH"
            else
                echo "src_cache : ${COLOR_RED}Not cached${COLOR_OFF}"
            fi
    esac

    is_package_installed "$1" || return 0

    __load_installed_metadata_of_the_given_package "$1"

    echo "installed ${COLOR_PURPLE}==>${COLOR_OFF} $(du -sh "$MY_INSTALL_DIR/$1" | awk '{print $2, $1}')"

    unset I
    unset ABI
    unset INSTALLED_ABIS
    unset INSTALLED_ABIS_LENGTH

    INSTALLED_ABIS=$(cat "$MY_INSTALL_DIR/$1/installed-abis")
    INSTALLED_ABIS_LENGTH=$(list_length $INSTALLED_ABIS)

    MAX=0
    for ABI in $INSTALLED_ABIS
    do
        unset V
        V=$(printf '%s\n' "$ABI" | wc -m)
        if [ "$V" -gt "$MAX" ] ; then
            MAX=$V
        fi
    done

    for ABI in $INSTALLED_ABIS
    do
        I=$(expr ${I-0} + 1)
        if [ "$I" -eq "$INSTALLED_ABIS_LENGTH" ] ; then
            printf "              └── %-${MAX}s %s\n" "$ABI" "$(du -sh "$MY_INSTALL_DIR/$1/$ABI" | cut -f1)"
        else
            printf "              ├── %-${MAX}s %s\n" "$ABI" "$(du -sh "$MY_INSTALL_DIR/$1/$ABI" | cut -f1)"
        fi
    done

    echo "
installed-datetime    : $(format_unix_timestamp $INSTALLED_DATETIME '+%Y/%m/%d %H:%M:%S')
installed-pkg-version : $INSTALLED_PKG_VERS
build-use-toolchain   : $BUILD_USE_TOOLCHAIN_NAME $BUILD_USE_TOOLCHAIN_VERS
"
}

mark_is_package_installed_or_not() {
    if is_package_installed "$1" ; then
        echo "${COLOR_GREEN}$1${COLOR_OFF}"
    else
        echo "${COLOR_RED}$1${COLOR_OFF}"
    fi
}

__record_installed_files_of_the_given_package() {
    if [ -z "$2" ] ; then
        INSTALLED_FILES_FILEPATH="$MY_INSTALL_DIR/$1/installed-files"
        echo "-- Installing: $INSTALLED_FILES_FILEPATH"

        touch "$INSTALLED_FILES_FILEPATH"
        return 0

        # TODO
        exec 7> "$INSTALLED_FILES_FILEPATH"

        __record_installed_files_of_the_given_package "$1" "$MY_INSTALL_DIR/$1"

        exec 7>&-

        sed_in_place "s|$MY_INSTALL_DIR/$1/||" "$INSTALLED_FILES_FILEPATH"
    else
        for file in $(ls $2)
        do
            file="$2/$file"
            if [ -d "$file" ] ; then
                __record_installed_files_of_the_given_package "$1" "$file"
            else
                printf '%s %s\n' $(md5sum "$file") "$file" >&7
            fi
        done
    fi
}

__record_installed_metadata_of_the_given_package() {
    die_if_package_is_not_specified "$1"

    INSTALLED_METADATA_FILEPATH="$MY_INSTALL_DIR/$1/installed-metadata"

    echo "-- Installing: $INSTALLED_METADATA_FILEPATH"

    cat > "$INSTALLED_METADATA_FILEPATH" <<EOF
INSTALLED_DATETIME='$TIMESTAMP_UNIX'

INSTALLED_PKG_NAME='$PACKAGE_NAME'
INSTALLED_PKG_VERS='$PACKAGE_VERSION'

BUILD_USE_SDK_VERS='$TARGET_OS_VERS'

BUILD_USE_TOOLCHAIN_NAME='$TOOLCHAIN_NAME'
BUILD_USE_TOOLCHAIN_VERS='$TOOLCHAIN_VERS'
EOF
}

__load_installed_metadata_of_the_given_package() {
    die_if_package_is_not_installed "$1"

    unset INSTALLED_DATETIME
    unset INSTALLED_PKG_NAME
    unset INSTALLED_PKG_VERS

    unset BUILD_USE_SDK_VERS

    unset BUILD_USE_TOOLCHAIN_NAME
    unset BUILD_USE_TOOLCHAIN_VERS

    INSTALLED_METADATA_FILEPATH="$MY_INSTALL_DIR/$1/installed-metadata"

    . "$INSTALLED_METADATA_FILEPATH" || die "$INSTALLED_METADATA_FILEPATH is broken."
}

# __config_variables_for_the_given_target <PACKAGE-NAME> <TARGET>
# __config_variables_for_the_given_target      curl      iPhoneOS/arm64/8.0
__config_variables_for_the_given_target() {
    TARGET_OS_KIND=darwin
    TARGET_OS_TYPE=darwin
    TARGET_OS_NAME=$(printf '%s\n' "$2" | cut -d/ -f1)
    TARGET_OS_VERS=$(printf '%s\n' "$2" | cut -d/ -f3)
    TARGET_OS_ARCH=$(printf '%s\n' "$2" | cut -d/ -f2)
    TARGET_OS_ABI="$TARGET_OS_NAME/$TARGET_OS_ARCH"

    case $TARGET_OS_ARCH in
        *64*) TARGET_OS_BIT=64 ;;
        *)    TARGET_OS_BIT=32 ;;
    esac

    TARGET_TRIPLE=$(print_target_triple_by_arch "$TARGET_OS_ARCH")

    SYSROOT="$TOOLCHAIN_ROOT/Platforms/${TARGET_OS_NAME}.platform/Developer/SDKs/${TARGET_OS_NAME}.sdk"

    TARGET_OS_NAME_LOWER_CASE="$(printf "$TARGET_OS_NAME" | awk '{print(tolower($0))}')"

    for tool in $(list_tools_in_the_toolchain)
    do
        if [ "$tool" = 'cpp' ] ; then
            CPP="$CC -E"
        else
            eval $(echo "$tool" | tr a-z A-Z)=$(path_of_tool_in_the_toolchain "$tool")
        fi
    done

    SYSTEM_INCLUDE_DIR="$SYSROOT/usr/include"
    SYSTEM_LIBRARY_DIR="$SYSROOT/usr/lib"

     CCFLAGS="-isysroot $SYSROOT -arch $TARGET_OS_ARCH -m${TARGET_OS_NAME_LOWER_CASE}-version-min=$TARGET_OS_VERS -Qunused-arguments -Os -pipe"
    CPPFLAGS="-isysroot $SYSROOT -Qunused-arguments"
     LDFLAGS="-isysroot $SYSROOT -arch $TARGET_OS_ARCH -m${TARGET_OS_NAME_LOWER_CASE}-version-min=$TARGET_OS_VERS"

    if [ "$BUILD_TYPE" = release ] ; then
        CCFLAGS="$CCFLAGS -Wl,-S -Os -DNDEBUG"
        LDFLAGS="$LDFLAGS -Wl,-S"
    fi

    for item in $PACKAGE_CDEFINE
    do
        CPPFLAGS="$CPPFLAGS -D$item"
    done

    CPPFLAGS="$CPPFLAGS -include $COMMON_INCLUDE_H_FILEPATH"

    if [ -n "$PACKAGE_CCFLAGS" ] ; then
        CCFLAGS="$CCFLAGS $PACKAGE_CCFLAGS"
    fi

    if [ -n "$PACKAGE_LDFLAGS" ] ; then
        LDFLAGS="$LDFLAGS $PACKAGE_LDFLAGS"
    fi

    case $TARGET_OS_ARCH in
        armv7*) CPPFLAGS="$CPPFLAGS -D__arm__"   ;;
        arm64*) CPPFLAGS="$CPPFLAGS -D__arm64__" ;;
        i386)   CPPFLAGS="$CPPFLAGS -D__i386__"  ;;
        x86_64) CPPFLAGS="$CPPFLAGS -D__x86_64__";;
    esac

    # https://www.freedesktop.org/wiki/Software/pkg-config/CrossCompileProposal
    unset PKG_CONFIG_SYSROOT_DIR
    unset PKG_CONFIG_LIBDIR
    unset PKG_CONFIG_PATH

    # https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_ROOT_PATH.html
    # https://cmake.org/cmake/help/latest/variable/CMAKE_IGNORE_PATH.html
    # https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html
    # https://cmake.org/cmake/help/latest/variable/CMAKE_INCLUDE_PATH.html
    # https://cmake.org/cmake/help/latest/variable/CMAKE_LIBRARY_PATH.html
    unset CMAKE_FIND_ROOT_PATH
    unset CMAKE_IGNORE_PATH
    unset CMAKE_PREFIX_PATH
    unset CMAKE_INCLUDE_PATH
    unset CMAKE_LIBRARY_PATH

    for DEPENDENCY_PACKAGE_NAME in $DEPENDENCY_PACKAGE_LIST
    do
        DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR="$MY_INSTALL_DIR/$DEPENDENCY_PACKAGE_NAME/$TARGET_OS_ABI"
        DEPENDENCY_PACKAGE_TARGET_INSTALLED_INCLUDE_DIR="$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR/include"
        DEPENDENCY_PACKAGE_TARGET_INSTALLED_LIBRARY_DIR="$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR/lib"
        DEPENDENCY_PACKAGE_TARGET_INSTALLED_PKGCONF_DIR="$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR/lib/pkgconfig"

        DEPENDENCY_PACKAGE_NAME_UNDERSCORE=$(printf '%s\n' "$DEPENDENCY_PACKAGE_NAME" | tr '+-.' '_')

        eval "${DEPENDENCY_PACKAGE_NAME_UNDERSCORE}_INSTALL_DIR='$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR'"
        eval "${DEPENDENCY_PACKAGE_NAME_UNDERSCORE}_INCLUDE_DIR='$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INCLUDE_DIR'"
        eval "${DEPENDENCY_PACKAGE_NAME_UNDERSCORE}_LIBRARY_DIR='$DEPENDENCY_PACKAGE_TARGET_INSTALLED_LIBRARY_DIR'"

        CPPFLAGS="-I$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INCLUDE_DIR $CPPFLAGS"
         LDFLAGS="-L$DEPENDENCY_PACKAGE_TARGET_INSTALLED_LIBRARY_DIR $LDFLAGS"

        if [ -z "$PKG_CONFIG_PATH" ] ; then
            PKG_CONFIG_PATH="$DEPENDENCY_PACKAGE_TARGET_INSTALLED_PKGCONF_DIR"
        else
            PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$DEPENDENCY_PACKAGE_TARGET_INSTALLED_PKGCONF_DIR"
        fi

        if [ -z "$CMAKE_FIND_ROOT_PATH" ] ; then
            CMAKE_FIND_ROOT_PATH="$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR"
        else
            CMAKE_FIND_ROOT_PATH="$CMAKE_FIND_ROOT_PATH;$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR"
        fi

        for item in bin sbin
        do
            if [ -d "$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR/$item" ] ; then
                if [ -z "$CMAKE_IGNORE_PATH" ] ; then
                    CMAKE_IGNORE_PATH="$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR/$item"
                else
                    CMAKE_IGNORE_PATH="$CMAKE_IGNORE_PATH;$DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR/$item"
                fi
            fi
        done
    done

    unset DEPENDENCY_PACKAGE_NAME
    unset DEPENDENCY_PACKAGE_NAME_UNDERSCORE
    unset DEPENDENCY_PACKAGE_TARGET_INSTALLED_INSTALL_DIR
    unset DEPENDENCY_PACKAGE_TARGET_INSTALLED_INCLUDE_DIR
    unset DEPENDENCY_PACKAGE_TARGET_INSTALLED_LIBRARY_DIR
    unset DEPENDENCY_PACKAGE_TARGET_INSTALLED_PKGCONF_DIR

    TARGET_WORKING_DIR="$PACKAGE_WORKING_DIR/$TARGET_OS_ABI"
    TARGET_BUILD_DIR="$TARGET_WORKING_DIR/build"
    TARGET_INSTALL_DIR="$MY_INSTALL_DIR/$1/$TARGET_OS_ABI"
    TARGET_BINARY__DIR="$TARGET_INSTALL_DIR/bin"
    TARGET_INCLUDE_DIR="$TARGET_INSTALL_DIR/include"
    TARGET_LIBRARY_DIR="$TARGET_INSTALL_DIR/lib"
    TARGET_PKGCONF_DIR="$TARGET_INSTALL_DIR/lib/pkgconfig"

    CPPFLAGS="-I$TARGET_WORKING_DIR/include -I$PACKAGE_WORKING_DIR $CPPFLAGS"
     LDFLAGS="-L$TARGET_WORKING_DIR/lib     -L$PACKAGE_WORKING_DIR  $LDFLAGS"

    if [ "$LOG_LEVEL" -ge "$LOG_LEVEL_VERBOSE" ] ; then
        CCFLAGS="$CCFLAGS -v -Wl,-v"
        LDFLAGS="$LDFLAGS -v -Wl,-v"
    fi

      CFLAGS="$CCFLAGS"
    CXXFLAGS="$CCFLAGS"

    if [ -n "$PACKAGE_XXFLAGS" ] ; then
        CXXFLAGS="$CXXFLAGS $PACKAGE_XXFLAGS"
    fi

    PKG_CONFIG_LIBDIR="$PKG_CONFIG_PATH"

    # https://cmake.org/cmake/help/latest/manual/cmake-env-variables.7.html#manual:cmake-env-variables(7)
    if [ "$PACKAGE_BUILD_SYSTEM_CMAKE" = yes ] ; then
        unset CMAKE_PREFIX_PATH
        unset CMAKE_APPLE_SILICON_PROCESSOR
        unset CMAKE_BUILD_PARALLEL_LEVEL
        unset CMAKE_BUILD_TYPE
        unset CMAKE_CONFIGURATION_TYPES
        unset CMAKE_CONFIG_TYPE
        unset CMAKE_EXPORT_COMPILE_COMMANDS
        unset CMAKE_GENERATOR
        unset CMAKE_GENERATOR_INSTANCE
        unset CMAKE_GENERATOR_PLATFORM
        unset CMAKE_GENERATOR_TOOLSET
        unset CMAKE_INSTALL_MODE
        unset CMAKE_C_COMPILER_LAUNCHER
        unset CMAKE_C_LINKER_LAUNCHER
        unset CMAKE_CXX_COMPILER_LAUNCHER
        unset CMAKE_CXX_LINKER_LAUNCHER
        unset CMAKE_MSVCIDE_RUN_PATH
        unset CMAKE_NO_VERBOSE
        unset CMAKE_OSX_ARCHITECTURES
        unset CMAKE_TOOLCHAIN_FILE
        unset DESTDIR
        unset CTEST_INTERACTIVE_DEBUG_MODE
        unset CTEST_OUTPUT_ON_FAILURE
        unset CTEST_PARALLEL_LEVEL
        unset CTEST_PROGRESS_OUTPUT
        unset CTEST_USE_LAUNCHERS_DEFAULT
        unset DASHBOARD_TEST_FROM_CTEST

        # https://cmake.org/cmake/help/latest/envvar/CMAKE_BUILD_PARALLEL_LEVEL.html
        export CMAKE_BUILD_PARALLEL_LEVEL="$BUILD_NJOBS"

        # https://cmake.org/cmake/help/latest/envvar/CMAKE_GENERATOR.html
        if [ "$PACKAGE_BUILD_SYSTEM_NINJA" = yes ] ; then
            export CMAKE_GENERATOR='Ninja'
        else
            export CMAKE_GENERATOR='Unix Makefiles'
        fi

        # https://cmake.org/cmake/help/latest/envvar/CMAKE_EXPORT_COMPILE_COMMANDS.html
        if [ "$EXPORT_COMPILE_COMMANDS_JSON" = yes ] ; then
            export CMAKE_EXPORT_COMPILE_COMMANDS=ON
        else
            export CMAKE_EXPORT_COMPILE_COMMANDS=OFF
        fi

        case $BUILD_TYPE in
            debug)   CMAKE_BUILD_TYPE=Debug   ;;
            release) CMAKE_BUILD_TYPE=Release ;;
        esac

        case $INSTALL_LIB in
            static)  BUILD_SHARED_LIBS=OFF ;;
            *)       BUILD_SHARED_LIBS=ON
        esac

        if [ "$LOG_LEVEL" -eq "$LOG_LEVEL_QUIET" ] ; then
            CMAKE_VERBOSE_MAKEFILE=OFF
            CMAKE_COLOR_MAKEFILE=OFF
        else
            CMAKE_VERBOSE_MAKEFILE=ON
            CMAKE_COLOR_MAKEFILE=ON
        fi

        # https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_DEBUG_MODE.html
        if [ "$LOG_LEVEL" -ge "$LOG_LEVEL_DEBUG" ] ; then
            CMAKE_FIND_DEBUG_MODE=ON
        else
            CMAKE_FIND_DEBUG_MODE=OFF
        fi

        TARGET_CMAKE_TOOLCHAIN_FILE="$TARGET_WORKING_DIR/toolchain.cmake"
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] ; then
        case $TARGET_OS_NAME in
            MacOSX|*Simulator)
                case $TARGET_OS_ARCH in
                    arm64*) RUST_TARGET="aarch64-apple-darwin" ;;
                    *)      RUST_TARGET="$TARGET_OS_ARCH-apple-darwin"
                esac
                ;;
            *)  case $TARGET_OS_ARCH in
                    arm64*) RUST_TARGET="aarch64-apple-ios" ;;
                    *)      RUST_TARGET="$TARGET_OS_ARCH-apple-ios"
                esac
        esac

        # this environment variable is not defined by Rust, but it is widely used by third-party project.
        export RUST_TARGET="$RUST_TARGET"

        RUST_TARGET_UPPERCASE_UNDERSCORE=$(printf '%s\n' "$RUST_TARGET" | tr a-z A-Z | tr - _)

        # https://doc.rust-lang.org/cargo/reference/config.html#environment-variables
        # https://doc.rust-lang.org/cargo/reference/environment-variables.html
        export "CARGO_TARGET_${RUST_TARGET_UPPERCASE_UNDERSCORE}_AR"="$AR"
        export "CARGO_TARGET_${RUST_TARGET_UPPERCASE_UNDERSCORE}_LINKER"="$CC"

        export CARGO_BUILD_JOBS="$BUILD_NJOBS"

        export RUSTFLAGS="-Clink-arg=-L$TARGET_WORKING_DIR/lib -Clink-arg=-L$PACKAGE_WORKING_DIR"

        # https://libraries.io/cargo/cc
        # https://crates.io/crates/cc
        # https://docs.rs/cc/latest/cc/
        # https://github.com/alexcrichton/cc-rs
        export HOST_CC="$CC_FOR_BUILD"
        export HOST_CFLAGS="$CFLAGS_FOR_BUILD"

        export HOST_CXX="$CXX_FOR_BUILD"
        export HOST_CXXFLAGS="$CXXFLAGS_FOR_BUILD"

        export HOST_AR="$AR_FOR_BUILD"

        export TARGET_CC="$CC"
        export TARGET_CFLAGS="$CFLAGS $CPPFLAGS $LDFLAGS"

        export TARGET_CXX="$CXX"
        export TARGET_CXXFLAGS="$CXXFLAGS $CPPFLAGS $LDFLAGS"

        export TARGET_AR="$AR"


        # https://libraries.io/cargo/pkg-config
        # https://crates.io/crates/pkg-config
        # https://docs.rs/pkg-config/latest/pkg_config/
        # https://github.com/rust-lang/pkg-config-rs
        export TARGET_PKG_CONFIG_ALLOW_CROSS=1


        # https://libraries.io/cargo/cmake
        # https://crates.io/crates/cmake
        # https://docs.rs/cmake/latest/cmake/
        # https://github.com/alexcrichton/cmake-rs
        # this variable is not motioned in their document. you must read the source code of cmake-rs crate.
        export TARGET_CMAKE_TOOLCHAIN_FILE="$TARGET_CMAKE_TOOLCHAIN_FILE"

        for item in $DEPENDENCY_PACKAGE_LIST
        do
            case $item in
                openssl)
                    unset OPENSSL_DIR
                    # https://docs.rs/openssl/0.10.35/openssl/
                    export OPENSSL_DIR="$openssl_INSTALL_DIR"
                    ;;
            esac
        done
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_GO" = yes ] ; then
        # https://golang.org/doc/install/source#environment
        export CGO_ENABLED=1
        export CGO_CFLAGS="$CFLAGS"
        export CGO_CXXFLAGS="$CXXFLAGS"
        export CGO_CPPFLAGS="$CPPFLAGS"
        export CGO_LDFLAGS="$LDFLAGS"

        export GO111MODULE='auto'
        export GOPROXY='https://goproxy.cn'

        export GOOS="$TARGET_OS_TYPE"

        case $TARGET_OS_ARCH in
            armv7*)  export GOARCH=arm   ;;
            arm64*)  export GOARCH=arm64 ;;
            aarch64) export GOARCH=arm64 ;;
            i386)    export GOARCH=386   ;;
            i686)    export GOARCH=386   ;;
            x86_64)  export GOARCH=amd64 ;;
        esac
    fi
}

# __printf_variables_for_the_given_target <PACKAGE-NAME> <TARGET>
# __printf_variables_for_the_given_target      curl      iPhoneOS/arm64/8.0
__printf_variables_for_the_given_target() {
    echo "
        BUILD_NJOBS = $BUILD_NJOBS
        BUILD_TYPE  = $BUILD_TYPE

     TIMESTAMP_UNIX = $TIMESTAMP_UNIX

     NATIVE_OS_KIND = $NATIVE_OS_KIND
     NATIVE_OS_TYPE = $NATIVE_OS_TYPE
     NATIVE_OS_NAME = $NATIVE_OS_NAME
     NATIVE_OS_VERS = $NATIVE_OS_VERS
     NATIVE_OS_ARCH = $NATIVE_OS_ARCH
     NATIVE_OS_NCPU = $NATIVE_OS_NCPU

     TARGET_OS_KIND = $TARGET_OS_KIND
     TARGET_OS_TYPE = $TARGET_OS_TYPE
     TARGET_OS_NAME = $TARGET_OS_NAME
     TARGET_OS_VERS = $TARGET_OS_VERS
     TARGET_OS_ARCH = $TARGET_OS_ARCH
     TARGET_OS_ABI  = $TARGET_OS_ABI
     TARGET_OS_BIT  = $TARGET_OS_BIT
     TARGET_TRIPLE  = $TARGET_TRIPLE
     TARGET_INDEX   = $TARGET_INDEX

     TOOLCHAIN_NAME = $TOOLCHAIN_NAME
     TOOLCHAIN_VERS = $TOOLCHAIN_VERS
     TOOLCHAIN_ROOT = $TOOLCHAIN_ROOT
     TOOLCHAIN_BIND = $TOOLCHAIN_BIND

            SYSROOT = $SYSROOT

 SYSTEM_INCLUDE_DIR = $SYSTEM_INCLUDE_DIR
 SYSTEM_LIBRARY_DIR = $SYSTEM_LIBRARY_DIR

        BUILD_NJOBS = $BUILD_NJOBS
        BUILD_TYPE  = $BUILD_TYPE
    "

    for TOOL in $(list_tools_in_the_toolchain | tr a-z A-Z)
    do
        eval export "$TOOL=\"\$$TOOL\""
        printf "%19s = %s\n" "$TOOL" "$(eval echo \$$TOOL)"
    done

    echo

    for TOOL in $(list_tools_in_the_toolchain | tr a-z A-Z)
    do
        eval export "${TOOL}_FOR_BUILD=\"\$${TOOL}_FOR_BUILD\""
        printf "%19s = %s\n" "${TOOL}_FOR_BUILD" "$(eval echo \$${TOOL}_FOR_BUILD)"
    done

    echo

    for FLAG in $(list_flags_used_by_tools_in_the_toolchain)
    do
        eval export "$FLAG=\"\$$FLAG\""
        printf "\n%19s = " "$FLAG"
        FIRST=yes
        for item in $(eval echo \$$FLAG | tr ':' ' ')
        do
            if [ "$FIRST" = yes ] ; then
                FIRST=no
                echo "$item"
            else
                echo "                      $item"
            fi
        done
    done

    echo

    printf "\n%19s = " PATH
    FIRST=yes
    for item in $(printf '%s\n' "$PATH" | tr ' ' '|' | tr ':' ' ')
    do
        if [ "$FIRST" = yes ] ; then
            FIRST=no
            printf '%s\n' "$item" | tr '|' ' '
        else
            printf '%s\n' "                      $item" | tr '|' ' '
        fi
    done

    if [ "$PACKAGE_BUILD_SYSTEM_CARGO" = yes ] ; then
        echo
        env | sed -n '/CARGO/p'
        echo
        env | sed -n '/RUST/p'
        echo
        cat <<EOF
    HOST_AR       = $HOST_AR
    HOST_CC       = $HOST_CC
    HOST_CXX      = $HOST_CXX
    HOST_CFLAGS   = $HOST_CFLAGS
    HOST_CXXFLAGS = $HOST_CXXFLAGS

  TARGET_AR       = $TARGET_AR
  TARGET_CC       = $TARGET_CC
  TARGET_CXX      = $TARGET_CXX
  TARGET_CFLAGS   = $TARGET_CFLAGS
  TARGET_CXXFLAGS = $TARGET_CXXFLAGS
EOF
    fi

    if [ "$PACKAGE_BUILD_SYSTEM_GO" = yes ] ; then
        echo
        for item_ in $(go env | tr ' ' '|')
        do
            unset item0
            unset item1
            unset item2

            item0=$(printf '%s\n' "$item_" | tr '|' ' ')
            item1=$(printf '%s\n' "$item0" | cut -d= -f1)
            item2=$(printf '%s\n' "$item0" | cut -d= -f2 | sed 's/^"//' | sed 's/"$//')

            printf '      %-12s = %s\n' "$item1" "$item2"
        done
    fi

    echo "
PACKAGE_WORKING_DIR = $PACKAGE_WORKING_DIR
PACKAGE_SRC_DIR     = $PACKAGE_SRC_DIR
PACKAGE_BSCRIPT_DIR = $PACKAGE_BSCRIPT_DIR

 TARGET_WORKING_DIR = $TARGET_WORKING_DIR
 TARGET_BUILD_DIR   = $TARGET_BUILD_DIR
 TARGET_INSTALL_DIR = $TARGET_INSTALL_DIR
   "

    if [ "$LOG_LEVEL" -ge "$LOG_LEVEL_VERBOSE" ] ; then
        echo
        run export -p
        echo
    fi
}

__create_cmake_toolchain_file_for_the_given_target() {
    cat > "$TARGET_CMAKE_TOOLCHAIN_FILE" <<EOF
set(CMAKE_VERBOSE_MAKEFILE $CMAKE_VERBOSE_MAKEFILE)
set(CMAKE_COLOR_MAKEFILE   $CMAKE_COLOR_MAKEFILE)

set(BUILD_SHARED_LIBS $BUILD_SHARED_LIBS)

set(CMAKE_BUILD_TYPE  $CMAKE_BUILD_TYPE)

set(CMAKE_SYSTEM_NAME      Darwin)
set(CMAKE_SYSTEM_VERSION   $TARGET_OS_VERS)
set(CMAKE_SYSTEM_PROCESSOR $TARGET_OS_ARCH)

set(CMAKE_ASM_COMPILER $CC)
set(CMAKE_ASM_FLAGS "-arch $TARGET_OS_ARCH")

set(CMAKE_C_COMPILER "$CC")
set(CMAKE_C_FLAGS "$CFLAGS $CPPFLAGS $LDFLAGS")

set(CMAKE_CXX_COMPILER "$CXX")
set(CMAKE_CXX_FLAGS "$CXXFLAGS $CPPFLAGS $LDFLAGS")

set(CMAKE_AR     "$AR")
set(CMAKE_NM     "$NM")
set(CMAKE_RANLIB "$RANLIB")
set(CMAKE_STRIP  "$STRIP")

set(CMAKE_OSX_SYSROOT "$SYSROOT")

# https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_ARCHITECTURES.html
set(CMAKE_OSX_ARCHITECTURES "$TARGET_OS_ARCH" CACHE STRING "")

set(CMAKE_FIND_DEBUG_MODE $CMAKE_FIND_DEBUG_MODE)

set(CMAKE_FIND_ROOT_PATH "$CMAKE_FIND_ROOT_PATH")

set(CMAKE_LIBRARY_PATH "$SYSTEM_LIBRARY_DIR")

set(CMAKE_IGNORE_PATH "$CMAKE_IGNORE_PATH")
EOF

    if [ "$LOG_LEVEL" -gt "$LOG_LEVEL_QUIET" ] ; then
        run cat "$TARGET_CMAKE_TOOLCHAIN_FILE"
    fi
}

gow() {
    # https://pkg.go.dev/cmd/go
    # https://pkg.go.dev/cmd/link

    unset GO_BUILD_ARGS
    unset GO_BUILD_ARGV_V
    unset GO_BUILD_ARGV_X
    unset GO_BUILD_ARGV_O
    unset GO_BUILD_ARGV_MOD
    unset GO_BUILD_ARGV_TAGS
    unset GO_BUILD_ARGV_LDFLAGS

    unset GO_BUILD_ARGS_EXTRA

    while [ -n "$1" ]
    do
        case $1 in
            -v) shift ; GO_BUILD_ARGV_V='-v' ;;
            -x) shift ; GO_BUILD_ARGV_X='-x' ;;
            -o) shift ; GO_BUILD_ARGV_O="$1" ; shift ;;
            -X) shift
                if [ -z "$GO_BUILD_ARGV_LDFLAGS" ] ; then
                    GO_BUILD_ARGV_LDFLAGS="-X $1"
                else
                    GO_BUILD_ARGV_LDFLAGS="$GO_BUILD_ARGV_LDFLAGS -X $1"
                fi
                shift
                ;;
            -ldflags)
                shift
                if [ -z "$GO_BUILD_ARGV_LDFLAGS" ] ; then
                    GO_BUILD_ARGV_LDFLAGS="$1"
                else
                    GO_BUILD_ARGV_LDFLAGS="$1 $GO_BUILD_ARGV_LDFLAGS"
                fi
                shift
                ;;
            *)  GO_BUILD_ARGS_EXTRA="$GO_BUILD_ARGS_EXTRA $1" ; shift
        esac
    done

    GO_BUILD_ARGS='-trimpath'

    if [ -z "$GO_BUILD_ARGV_V" ] ; then
        if [ "$LOG_LEVEL" -gt "$LOG_LEVEL_QUIET" ] ; then
            GO_BUILD_ARGS="$GO_BUILD_ARGS -v"
        fi
    else
        GO_BUILD_ARGS="$GO_BUILD_ARGS -v"
    fi

    if [ -z "$GO_BUILD_ARGV_X" ] ; then
        if [ "$LOG_LEVEL" -ge "$LOG_LEVEL_VERBOSE" ] ; then
            GO_BUILD_ARGS="$GO_BUILD_ARGS -x"
        fi
    else
        GO_BUILD_ARGS="$GO_BUILD_ARGS -x"
    fi

    if [ -z "$GO_BUILD_ARGV_LDFLAGS" ] ; then
        GO_BUILD_ARGS="$GO_BUILD_ARGS -ldflags '-s -w'"
    else
        GO_BUILD_ARGS="$GO_BUILD_ARGS -ldflags '-s -w $GO_BUILD_ARGV_LDFLAGS'"
    fi

    if [ -z "$GO_BUILD_ARGV_O" ] ; then
        GO_BUILD_ARGS="$GO_BUILD_ARGS -o $TARGET_BUILD_DIR/"
    else
        GO_BUILD_ARGS="$GO_BUILD_ARGS -o $TARGET_BUILD_DIR/$GO_BUILD_ARGV_O"
    fi

    GO_BUILD_ARGS="$GO_BUILD_ARGS $GO_BUILD_ARGS_EXTRA"

    run go build $GO_BUILD_ARGS || return 1

    for item in $(ls "$TARGET_BUILD_DIR")
    do
        case $item in
            *.a)  run install_libs "$TARGET_BUILD_DIR/$item" ;;
            *.so) run install_libs "$TARGET_BUILD_DIR/$item" ;;
            *)    run install_bins "$TARGET_BUILD_DIR/$item" ;;
        esac
    done
}

cargow() {
    case $1 in
        build)
            # https://doc.rust-lang.org/cargo/commands/cargo-clean.html
            # https://doc.rust-lang.org/cargo/commands/cargo-build.html

            unset CARGO_BUILD_ARGS
            unset CARGO_BUILD_ARG_VV
            unset CARGO_BUILD_ARG_TARGET
            unset CARGO_BUILD_ARG_RELEASE

            for arg in $@
            do
                case $arg in
                    --vv)      CARGO_BUILD_ARG_VV=set      ;;
                    --target)  CARGO_BUILD_ARG_TARGET=set  ;;
                    --release) CARGO_BUILD_ARG_RELEASE=set ;;
                esac
            done

            CARGO_BUILD_ARGS="$@"

            if [ -z "$CARGO_BUILD_ARG_VV" ] ; then
                CARGO_BUILD_ARGS="$CARGO_BUILD_ARGS -vv"
            fi

            if [ -z "$CARGO_BUILD_ARG_RELEASE" ] ; then
                CARGO_BUILD_ARGS="$CARGO_BUILD_ARGS --release"
            fi

            if [ -z "$CARGO_BUILD_ARG_TARGET" ] ; then
                CARGO_BUILD_ARGS="$CARGO_BUILD_ARGS --target $RUST_TARGET"
            fi

            run cargo clean && run cargo $CARGO_BUILD_ARGS
            ;;
        install)
            # https://doc.rust-lang.org/cargo/commands/cargo-clean.html
            # https://doc.rust-lang.org/cargo/commands/cargo-install.html

            unset CARGO_INSTALL_ARGS
            unset CARGO_INSTALL_ARG_TARGET
            unset CARGO_INSTALL_ARG_PATH
            unset CARGO_INSTALL_ARG_ROOT
            unset CARGO_INSTALL_ARG_VV

            for arg in $@
            do
                case $arg in
                    --target) CARGO_INSTALL_ARG_TARGET=set ;;
                    --path)   CARGO_INSTALL_ARG_PATH=set   ;;
                    --root)   CARGO_INSTALL_ARG_ROOT=set   ;;
                    --vv)     CARGO_INSTALL_ARG_VV=set     ;;
                esac
            done

            CARGO_INSTALL_ARGS="$@"

            if [ -z "$CARGO_INSTALL_ARG_VV" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS -vv"
            fi

            if [ -z "$CARGO_INSTALL_ARG_TARGET" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS --target $RUST_TARGET"
            fi

            if [ -z "$CARGO_INSTALL_ARG_PATH" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS --path $PACKAGE_BSCRIPT_DIR"
            fi

            if [ -z "$CARGO_INSTALL_ARG_ROOT" ] ; then
                CARGO_INSTALL_ARGS="$CARGO_INSTALL_ARGS --root=$TARGET_INSTALL_DIR"
            fi

            run cargo clean && run cargo $CARGO_INSTALL_ARGS
            ;;
        cbuild|cinstall)
            unset CARGO_CINSTALL_ARGS
            unset CARGO_CINSTALL_ARG_Q
            unset CARGO_CINSTALL_ARG_V
            unset CARGO_CINSTALL_ARG_VV
            unset CARGO_CINSTALL_ARG_DEBUG
            unset CARGO_CINSTALL_ARG_RELEASE
            unset CARGO_CINSTALL_ARG_TARGET
            unset CARGO_CINSTALL_ARG_PREFIX

            for arg in $@
            do
                case $arg in
                    -q|--quiet)   CARGO_CINSTALL_ARG_Q=set       ;;
                    -v|--verbose) CARGO_CINSTALL_ARG_V=set       ;;
                    -vv)          CARGO_CINSTALL_ARG_VV=set      ;;
                    --debug)      CARGO_CINSTALL_ARG_DEBUG=set   ;;
                    --release)    CARGO_CINSTALL_ARG_RELEASE=set ;;
                    --target)     CARGO_CINSTALL_ARG_TARGET=set  ;;
                    --prefix)     CARGO_CINSTALL_ARG_PREFIX=set  ;;
                esac
            done

            CARGO_CINSTALL_ARGS="$@"

            if [ -z "$CARGO_CINSTALL_ARG_Q" ] && [ -z "$CARGO_CINSTALL_ARG_V" ] && [ -z "$CARGO_CINSTALL_ARG_VV" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS -vv"
            fi

            if [ -z "$CARGO_CINSTALL_ARG_DEBUG" ] && [ -z "$CARGO_CINSTALL_ARG_RELEASE" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS --release"
            fi

            if [ -z "$CARGO_CINSTALL_ARG_TARGET" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS --target $RUST_TARGET"
            fi

            if [ -z "$CARGO_CINSTALL_ARG_PREFIX" ] ; then
                CARGO_CINSTALL_ARGS="$CARGO_CINSTALL_ARGS --prefix $TARGET_INSTALL_DIR"
            fi

            run cargo $CARGO_CINSTALL_ARGS
            ;;
        *) cargo $@
    esac
}

config_url() {
    echo "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$1;hb=HEAD"
}

# run in a subshell
configure() {
    if [ -z "$CONFIG_XX_UPDATED" ] ; then
        CONFIG_XX_UPDATED=yes
        # https://www.gnu.org/software/gettext/manual/html_node/config_002eguess.html
        # https://git.savannah.gnu.org/cgit/config.git/tree/
        for item in config.sub config.guess
        do
            for file in $(find "$PACKAGE_BSCRIPT_DIR" -name "$item")
            do
                CONFIG_XX="$MY_CACHED_SOURCE_DIR/config/$item"
                if [ ! -f "$CONFIG_XX" ] ; then
                    wfetch "$(config_url "$item")" --output-path="$CONFIG_XX" || return 1
                    run chmod a+x "$CONFIG_XX" || return 1
                    if [ "$item" = 'config.sub' ] ; then
                        sed_in_place 's/arm64-*/arm64-*|arm64e-*/g' "$CONFIG_XX" || return 1
                    fi
                fi
                run cp -f "$CONFIG_XX" "$file" || return 1
            done
        done
    fi

    if [ "$STEP_MESSAGE" = 'build for native' ] ; then
        if run "$PACKAGE_BSCRIPT_DIR"/configure \
            --prefix="$NATIVE_INSTALL_DIR" \
            $@ ; then
            echo
        else
            if [ -f "$TARGET_BUILD_DIR/config.log" ] ; then
                run cat "$TARGET_BUILD_DIR/config.log"
            elif [ -f "$PACKAGE_BSCRIPT_DIR/config.log" ] ; then
                run cat "$PACKAGE_BSCRIPT_DIR/config.log"
            fi
            return 1
        fi
    else
        if run "$PACKAGE_BSCRIPT_DIR"/configure \
            --host="\"$TARGET_TRIPLE\"" \
            --prefix="\"$TARGET_INSTALL_DIR\"" \
            --disable-option-checking \
            --disable-rpath \
            --disable-debug \
            --disable-nls\
            --enable-largefile \
            --enable-static \
            --disable-shared \
            CC="\"$CC\"" \
            CFLAGS="\"$CFLAGS\"" \
            CXX="\"$CXX\"" \
            CXXFLAGS="\"$CXXFLAGS\"" \
            CPP="\"$CPP\"" \
            CPPFLAGS="\"$CPPFLAGS\"" \
            LDFLAGS="\"$LDFLAGS\"" \
            AR="\"$AR\"" \
            RANLIB="\"$RANLIB\"" \
            PKG_CONFIG="\"$PKG_CONFIG\"" \
            PKG_CONFIG_PATH="\"$PKG_CONFIG_PATH\"" \
            PKG_CONFIG_LIBDIR="\"\"" \
            CC_FOR_BUILD="\"$CC_FOR_BUILD\"" \
            $@ ; then
            echo
        else
            if [ -f "$TARGET_BUILD_DIR/config.log" ] ; then
                run cat "$TARGET_BUILD_DIR/config.log"
            elif [ -f "$PACKAGE_BSCRIPT_DIR/config.log" ] ; then
                run cat "$PACKAGE_BSCRIPT_DIR/config.log"
            fi
            return 1
        fi
    fi

    if [ "$LOG_LEVEL" -ge "$LOG_LEVEL_VERBOSE" ] ; then
        for Makefile in $(find "$PACKAGE_BSCRIPT_DIR" -name Makefile)
        do
            sed_in_place 's|\t@|\t|g'     "$Makefile" || return 1
            sed_in_place 's|@echo|echo|g' "$Makefile" || return 1
        done
        unset Makefile
    fi

    makew clean &&
    makew       &&
    makew install
}

# make wrapper
makew() {
    if [ "$LOG_LEVEL" -ge "$LOG_LEVEL_DEBUG" ] ; then
        run "$GMAKE -w -j$BUILD_NJOBS --debug V=1 $*"
    else
        run "$GMAKE -w -j$BUILD_NJOBS $*"
    fi
}

# https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling
# https://cmake.org/cmake/help/latest/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_ROOT_PATH.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html
# https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html
# https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html
# https://cmake.org/cmake/help/latest/command/enable_testing.html?highlight=build_testing
# run in a subshell
cmakew() {
    if [ "$STEP_MESSAGE" = 'build for native' ] ; then
        # https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_DEBUG_MODE.html
        if [ "$LOG_LEVEL" -ge "$LOG_LEVEL_DEBUG" ] ; then
            CMAKE_CONFIG_OPTIONS="$@ -DCMAKE_FIND_DEBUG_MODE=TRUE"
        else
            CMAKE_CONFIG_OPTIONS="$@"
        fi

        run $CMAKE \
            -Wno-dev \
            -S $PACKAGE_BSCRIPT_DIR \
            -B $NATIVE_BUILD_DIR \
            -DCMAKE_INSTALL_PREFIX=$NATIVE_INSTALL_DIR \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_TESTING=OFF \
            $CMAKE_CONFIG_OPTIONS &&
        run $CMAKE --build   "$NATIVE_BUILD_DIR" -- -j$BUILD_NJOBS &&
        run $CMAKE --install "$NATIVE_BUILD_DIR"
    else
        run $CMAKE \
            -Wno-dev \
            -S $PACKAGE_BSCRIPT_DIR \
            -B $TARGET_BUILD_DIR \
            -DCMAKE_INSTALL_PREFIX=$TARGET_INSTALL_DIR \
            -DCMAKE_TOOLCHAIN_FILE=$TARGET_CMAKE_TOOLCHAIN_FILE \
            -DCMAKE_VERBOSE_MAKEFILE=$CMAKE_VERBOSE_MAKEFILE \
            -DCMAKE_COLOR_MAKEFILE=$CMAKE_COLOR_MAKEFILE $@ &&
        run $CMAKE --build   "$TARGET_BUILD_DIR" -- -j$BUILD_NJOBS &&
        run $CMAKE --install "$TARGET_BUILD_DIR"
    fi
}

# run in a subshell
xmakew() {
    XMAKE=$(command -v xmake)

    [ -z "$XMAKE" ] && die "command not found: xmake"

    run xmake --version

    XMAKE_CONFIG_OPTIONS="$@"

    XMAKE_CONFIG_OPTION_CLEAN=
    XMAKE_CONFIG_OPTION_MODE=
    XMAKE_CONFIG_OPTION_vD=

    for arg in $@
    do
        case $arg in
            -c|--clean)  XMAKE_CONFIG_OPTION_CLEAN=set ;;
            -m|--mode=*) XMAKE_CONFIG_OPTION_MODE=set  ;;
            -vD)         XMAKE_CONFIG_OPTION_vD=set ;;
        esac
    done

    if [ "$LOG_LEVEL" -ge "$LOG_LEVEL_DEBUG" ] && [ -z "$XMAKE_CONFIG_OPTION_vD" ]; then
        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTION_vD -vD"
    fi

    if [ -z "$XMAKE_CONFIG_OPTION_CLEAN" ] ; then
        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTIONS --clean"
    fi

    if [ -z "$XMAKE_CONFIG_OPTION_MODE" ] ; then
        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTIONS --mode=$BUILD_TYPE"
    fi

    if [ "$STEP_MESSAGE" = 'build for native' ] ; then
        run $XMAKE config $XMAKE_CONFIG_OPTIONS --project=$PACKAGE_BSCRIPT_DIR --buildir=$NATIVE_BUILD_DIR &&
        run $XMAKE --jobs=$BUILD_NJOBS &&
        run $XMAKE install -o "$NATIVE_INSTALL_DIR"
    else
        unset XMAKE_PLATFORM
        XMAKE_PLATFORM="$(printf '%s\n' "$TARGET_OS_NAME_LOWER_CASE" | sed 's|simulator|os|')"
        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTIONS --plat=$XMAKE_PLATFORM"

        case $TARGET_OS_NAME in
            *Simulator) XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTIONS --appledev=simulator"
        esac

        XMAKE_CONFIG_OPTIONS="$XMAKE_CONFIG_OPTIONS --arch=$TARGET_OS_ARCH --buildir=$TARGET_BUILD_DIR"

        run $XMAKE config $XMAKE_CONFIG_OPTIONS &&
        run $XMAKE --jobs=$BUILD_NJOBS &&
        run $XMAKE install -o "$TARGET_INSTALL_DIR"
    fi
}

# https://mesonbuild.com/Cross-compilation.html
# run in a subshell
mesonw() {
    case $TARGET_OS_ARCH in
        armv7*)
            HOST_MACHINE_CPU_FAMILY='arm'
            HOST_MACHINE_CPU_NAME="$TARGET_OS_ARCH"
            ;;
        arm64*|aarch64)
            HOST_MACHINE_CPU_FAMILY='aarch64'
            HOST_MACHINE_CPU_NAME='armv8a'
            ;;
        i386|i686)
            HOST_MACHINE_CPU_FAMILY='x86'
            HOST_MACHINE_CPU_NAME="$TARGET_OS_ARCH"
            ;;
        x86_64)
            HOST_MACHINE_CPU_FAMILY='x86_64'
            HOST_MACHINE_CPU_NAME="$TARGET_OS_ARCH"
            ;;
    esac

    MESON_CROSS_FILE="$TARGET_BUILD_DIR/cross-file"

    cat > "$MESON_CROSS_FILE" <<EOF
[host_machine]
system = '$TARGET_OS_TYPE'
endian = 'little'
cpu_family = '$HOST_MACHINE_CPU_FAMILY'
cpu = '$HOST_MACHINE_CPU_NAME'

[binaries]
c = '$CC'
cpp = '$CXX'
ar = '$AR'
strip = '$STRIP'
cmake = '$CMAKE'
pkgconfig = '$PKG_CONFIG'

EOF

    # https://mesonbuild.com/Machine-files.html#meson-builtin-options
    if command_exists_in_filesystem_and_version_matched meson lt 0.56.0 ; then
        cat >> "$MESON_CROSS_FILE" <<EOF
[properties]
c_args = $(to_meson_array $CFLAGS $CPPFLAGS)
c_link_args = $(to_meson_array $LDFLAGS)
cpp_args = $(to_meson_array $CXXFLAGS $CPPFLAGS)
cpp_link_args = $(to_meson_array $LDFLAGS)
EOF
    else
        cat >> "$MESON_CROSS_FILE" <<EOF
[built-in options]
c_args = $(to_meson_array $CFLAGS $CPPFLAGS)
c_link_args = $(to_meson_array $LDFLAGS)
cpp_args = $(to_meson_array $CXXFLAGS $CPPFLAGS)
cpp_link_args = $(to_meson_array $LDFLAGS)
EOF
        if [ "$PACKAGE_BUILD_SYSTEM_CMAKE" = yes ] ; then
            cat >> "$MESON_CROSS_FILE" <<EOF

[properties]
cmake_toolchain_file='$TARGET_CMAKE_TOOLCHAIN_FILE'
EOF
        fi
    fi

    unset MESON_ARGUMENT_DEFAULT_LIBRARY

    case $INSTALL_LIB in
        static|shared|both) MESON_ARGUMENT_DEFAULT_LIBRARY="-Ddefault_library=$INSTALL_LIB"
    esac

    run "$MESON" setup \
        --prefix="$TARGET_INSTALL_DIR" \
        --buildtype=$BUILD_TYPE \
        --backend=ninja \
        --pkg-config-path="$PKG_CONFIG_PATH" \
        --build.pkg-config-path="$PKG_CONFIG_PATH_FOR_BUILD" \
        --cross-file="$MESON_CROSS_FILE" \
        $MESON_ARGUMENT_DEFAULT_LIBRARY \
        $@ "$TARGET_BUILD_DIR" "$PACKAGE_BSCRIPT_DIR" &&
    {
        if command -v build_configed > /dev/null ; then
            build_configed
        fi
    } &&
    run ninja -C "$TARGET_BUILD_DIR" &&
    run ninja -C "$TARGET_BUILD_DIR" install
}

to_meson_array() {
    RESULT="[''"
    for item in $@
    do
        RESULT="$RESULT, '$item'"
    done
    RESULT="$RESULT]"
    echo "$RESULT"
}


########################################################################

create_common_linker_script() {
    :
}

create_common_include_h() {
    touch "$1"
}

die_if_the_given_rule_is_not_available() {
    [ -z "$1" ] && die "please specify a rule name."
    [ -f "$MY_HOME_DIR/rules/$1" ] || die "$1 : rule is not exist."
}

die_if_the_given_rule_is_already_exist() {
    [ -z "$1" ] && die "please specify a rule name."
    [ -f "$MY_HOME_DIR/rules/$1" ] && die "$1 : rule is already exist."
}

__view_the_given_rule() {
    die_if_the_given_rule_is_not_available "$1"

    if command -v bat > /dev/null ; then
        bat "$MY_HOME_DIR/rules/$1"
    else
        cat "$MY_HOME_DIR/rules/$1"
    fi
}

__edit_the_given_rule() {
    die_if_the_given_rule_is_not_available "$1"

    [ -z "$EDITOR" ] && EDITOR=$(command -v nvim || command -v vim || command -v vi || command -v open)
    [ -z "$EDITOR" ] && die "please set EDITOR environment variable."

    "$EDITOR" "$MY_HOME_DIR/rules/$1"

    __inspect_the_given_rule "$1"
}

__create_the_given_rule() {
    die_if_the_given_rule_is_already_exist "$1"

    cat > "$MY_HOME_DIR/rules/$1" <<EOF
# please comment or remove the line you don't want.

# AppleTVOS        : 9.0  : 64bit
# AppleTVSimulator : 9.0  : 64bit
# MacOSX           : 10.6 : 64bit
# WatchOS          : 2.0  : 64bit
# WatchSimulator   : 2.0  : 64bit
# iPhoneOS         : 8.0  : 64bit
# iPhoneSimulator  : 8.0  : 64bit
EOF
    __edit_the_given_rule "$1"
}

__delete_the_given_rule() {
    die_if_the_given_rule_is_not_available "$1"

    [ "$1" = 'default' ] && die "default rule can not be deleted."

    if rm "$MY_HOME_DIR/rules/$1" ; then
        success "delete $1 rule success."
    else
        die "delete $1 rule failed."
    fi
}

__rename_the_given_rule() {
    die_if_the_given_rule_is_not_available "$1"
    die_if_the_given_rule_is_already_exist "$2"

    [ "$1" = 'default' ] && die "default rule can not be renamed to another."

    if mv -v "$MY_HOME_DIR/rules/$1" "$MY_HOME_DIR/rules/$2" ; then
        success "rename rule $1 -> $2 success."
    else
        die "rename rule $1 -> $2 failed."
    fi
}

__inspect_the_given_rule() {
    die_if_the_given_rule_is_not_available "$1"

    unset TARGET_LIST

    while read LINE
    do
        LINE=$(printf '%s\n' "$LINE" | sed 's/[[:space:]]//g')

        case $LINE in
            '') continue ;;
            \#) continue ;;
        esac

        unset TARGET_OS_NAME
        unset TARGET_OS_VERS
        unset TARGET_OS_ARCH

        TARGET_OS_NAME=$(printf '%s\n' "$LINE" | cut -d: -f1)
        TARGET_OS_VERS=$(printf '%s\n' "$LINE" | cut -d: -f2)
        TARGET_OS_ARCH=$(printf '%s\n' "$LINE" | cut -d: -f3)

        if [ "$LOG_LEVEL" -ge "$LOG_LEVEL_VERBOSE" ] ; then
            printf '%s\n' "TARGET_OS_NAME=$TARGET_OS_NAME"
            printf '%s\n' "TARGET_OS_VERS=$TARGET_OS_VERS"
            printf '%s\n' "TARGET_OS_ARCH=$TARGET_OS_ARCH"
            printf '%s\n' '---------------------------------'
        fi

        if [ -z "$TARGET_OS_VERS" ] ; then
            TARGET_OS_VERS=$(get_supported_min_version "$TARGET_OS_NAME")
        fi

        if [ -z "$TARGET_OS_ARCH" ] ; then
            TARGET_OS_ARCH=all
        fi

        case $TARGET_OS_ARCH in
            all|64bit|32bit)
                for TARGET_OS_ARCH in $(__list_supported_target_archs "$TARGET_OS_NAME" "$TARGET_OS_ARCH")
                do
                    if [ -z "$TARGET_LIST" ]; then
                        TARGET_LIST="$TARGET_OS_NAME/$TARGET_OS_ARCH/$TARGET_OS_VERS"
                    else
                        TARGET_LIST="$TARGET_LIST $TARGET_OS_NAME/$TARGET_OS_ARCH/$TARGET_OS_VERS"
                    fi
                done
                ;;
            *)
                if [ -z "$TARGET_LIST" ]; then
                    TARGET_LIST="$TARGET_OS_NAME/$TARGET_OS_ARCH/$TARGET_OS_VERS"
                else
                    TARGET_LIST="$TARGET_LIST $TARGET_OS_NAME/$TARGET_OS_ARCH/$TARGET_OS_VERS"
                fi
        esac
    done < "$MY_HOME_DIR/rules/$1"

    unset TARGET_OS_NAME
    unset TARGET_OS_VERS
    unset TARGET_OS_ARCH

    if [ "$LOG_LEVEL" -ge "$LOG_LEVEL_VERBOSE" ] ; then
        for item in $TARGET_LIST
        do
            printf '%s\n' "$item"
        done
    fi
}

__list_targets_for_building() {
    printf '%s\n' "$TARGET_LIST"
}

inject_stub_system() {
    cat > "$PACKAGE_BSCRIPT_DIR/stub-system.c" <<EOF
#ifndef SYSTEM_STUB_C
#define SYSTEM_STUB_C

#include <stdlib.h>
#include <unistd.h>
#include <spawn.h>
#include <sys/wait.h>

extern char **environ;

#ifdef __cplusplus
    extern "C" {
#endif

__attribute__((unused))
static int stub_system(char* cmd) {
    char argv0[] = "sh";
    char argv1[] = "-c";
    char* const argv[4] = {argv0, argv1, cmd, NULL};
    pid_t pid;
    int status;
    status = posix_spawn(&pid, "/bin/sh", NULL, NULL, argv, environ);
    if (0 == status) {
        return waitpid(pid, &status, 0);
    }
    return status;
}

#define system(x) stub_system(x)

#ifdef __cplusplus
    }
#endif

#endif
EOF
    for item in $@
    do
        echo "inject $PACKAGE_BSCRIPT_DIR/stub-system.c -> $item"
        cat "$PACKAGE_BSCRIPT_DIR/stub-system.c" "$item" > "$item.bak" || return 1
        mv "$item.bak" "$item" || return 1
    done
}

inspect_build_toolchains() {
    TOOLCHAIN_ROOT="$(xcode-select -p)"

    [ -z "$TOOLCHAIN_ROOT" ] && die "please run command 'xcode-select --switch DIR', then try again."
    [ -d "$TOOLCHAIN_ROOT" ] || die "TOOLCHAIN_ROOT=$TOOLCHAIN_ROOT directory is not exist."

    TOOLCHAIN_NAME=xcode
    TOOLCHAIN_VERS=$(system_profiler SPDeveloperToolsDataType | grep Version | head -n 1 | cut -d: -f2 | sed 's/^ //g')
    TOOLCHAIN_BIND="$TOOLCHAIN_ROOT/Toolchains/XcodeDefault.xctoolchain/usr/bin"
    export PATH="$TOOLCHAIN_BIND:$PATH"
}

__list_rules() {
    ls "$MY_HOME_DIR/rules"
}

__list_supported_target_platforms() {
    [ -z "$TOOLCHAIN_ROOT" ] && inspect_build_toolchains
    ls "$TOOLCHAIN_ROOT/Platforms" | sed 's/.platform//g'
    #print_list AppleTVOS AppleTVSimulator MacOSX iPhoneOS iPhoneSimulator WatchOS WatchSimulator
}

# __list_supported_target_archs [32bit|64bit|all] [iPhoneOS|WatchOS|AppleTVOS|MacOSX|*Simulator|table|list]
__list_supported_target_archs() {
    unset LIST_SUPPORTED_ARCHS_ARG_BIT
    unset LIST_SUPPORTED_ARCHS_ARG_PLATFORM

    while [ -n "$1" ]
    do
        case $1 in
            32bit|64bit|all)
                LIST_SUPPORTED_ARCHS_ARG_BIT=$1
                ;;
            iPhoneOS|WatchOS|AppleTVOS|MacOSX|*Simulator|table|list)
                LIST_SUPPORTED_ARCHS_ARG_PLATFORM=$1
                ;;
            *) die "unrecognized argument : $1."
        esac
        shift
    done

    if [ -z "$LIST_SUPPORTED_ARCHS_ARG_BIT" ] ; then
        LIST_SUPPORTED_ARCHS_ARG_BIT=all
    fi

    if [ -z "$LIST_SUPPORTED_ARCHS_ARG_PLATFORM" ] ; then
        LIST_SUPPORTED_ARCHS_ARG_PLATFORM=list
    fi

    case $LIST_SUPPORTED_ARCHS_ARG_BIT in
        all)
            case $LIST_SUPPORTED_ARCHS_ARG_PLATFORM in
                iPhoneOS)   echo "arm64 arm64e armv7 armv7s" ;;
                WatchOS)    echo "arm64_32 armv7k" ;;
                AppleTVOS)  echo "arm64"       ;;
                MacOSX)     echo "arm64 x86_64 i386" ;;
                *Simulator) echo "arm64 x86_64 i386" ;;
                list)       echo "arm64 arm64e arm64_32 armv7 armv7s armv7k x86_64" ;;
                table) __print_platform_arch_table_all ;;
                *)  die "unsupported platform : $LIST_SUPPORTED_ARCHS_ARG_PLATFORM."
            esac
            ;;
        64bit)
            case $LIST_SUPPORTED_ARCHS_ARG_PLATFORM in
                iPhoneOS)   echo "arm64 arm64e" ;;
                WatchOS)    echo "arm64_32" ;;
                AppleTVOS)  echo "arm64"  ;;
                MacOSX)     echo "arm64 x86_64" ;;
                *Simulator) echo "arm64 x86_64" ;;
                list)       echo "arm64 arm64e arm64_32 x86_64" ;;
                table) __print_platform_arch_table_64bit ;;
                *)  die "unsupported platform : $LIST_SUPPORTED_ARCHS_ARG_PLATFORM."
            esac
            ;;
        32bit)
            case $LIST_SUPPORTED_ARCHS_ARG_PLATFORM in
                iPhoneOS)   echo "armv7 armv7s" ;;
                WatchOS)    echo "armv7k" ;;
                AppleTVOS)  die "AppleTVOS is not support 32bit."  ;;
                MacOSX)     echo "i386" ;;
                *Simulator) echo "i386" ;;
                list)       echo "armv7 armv7s armv7k i386" ;;
                table) __print_platform_arch_table_32bit ;;
                *)  die "unsupported platform : $LIST_SUPPORTED_ARCHS_ARG_PLATFORM."
            esac
            ;;
    esac
}

__print_platform_arch_table_64bit() {
    cat <<EOF
┌───────────┬───────────────────────────┐
│ platform  │ arch                      │
│           │                           │
│ AppleTVOS │ arm64                     │
│ WatchOS   │ arm64_32                  │
│ iPhoneOS  │ arm64 arm64e              │
│ MacOSX    │ arm64 x86_64              │
│ *Simulator│ arm64 x86_64              │
└───────────┴───────────────────────────┘
EOF
}

__print_platform_arch_table_32bit() {
    cat <<EOF
┌───────────┬───────────────────────────┐
│ platform  │ arch                      │
│           │                           │
│ AppleTVOS │                           │
│ WatchOS   │ armv7k                    │
│ iPhoneOS  │ armv7 armv7s              │
│ MacOSX    │ i386                      │
│ *Simulator│ i386                      │
└───────────┴───────────────────────────┘
EOF
}

__print_platform_arch_table_all() {
    cat <<EOF
┌───────────┬───────────────────────────┐
│ platform  │ arch                      │
│           │                           │
│ AppleTVOS │ arm64                     │
│ WatchOS   │ arm64_32 armv7k           │
│ iPhoneOS  │ arm64 arm64e armv7 armv7s │
│ MacOSX    │ arm64 x86_64              │
│ *Simulator│ arm64 x86_64              │
└───────────┴───────────────────────────┘
EOF
}

# __list_supported_target_abis 32bit|64bit|all
__list_supported_target_abis() {
    for PLATFORM in $(__list_supported_target_platforms)
    do
        for ARCH in $(__list_supported_target_archs $PLATFORM ${1-all} 2>/dev/null)
        do
            echo "$PLATFORM/$ARCH"
        done
    done
}

# __list_supported_target_triples 32bit|64bit|all
__list_supported_target_triples() {
    for ARCH in $(__list_supported_target_archs list ${1-all} 2>/dev/null)
    do
        print_target_triple_by_arch "$ARCH"
    done
}

print_target_triple_by_arch() {
    if [ 'arm64' = "$1" ] ; then
        if [ "$PACKAGE_IOS_IOS" = yes ] ; then
            echo 'aarch64-apple-ios'
        else
            echo 'aarch64-apple-darwin'
        fi
    else
        if [ "$PACKAGE_IOS_IOS" = yes ] ; then
            echo "$1-apple-ios"
        else
            echo "$1-apple-darwin"
        fi
    fi
}

print_target_arch_by_abi() {
    echo "$1" | cut -d/ -f2
}

list_tools_in_the_toolchain() {
    list cc cxx cpp as ar ranlib ld nm strip size strings objdump
}

list_flags_used_by_tools_in_the_toolchain() {
    list CFLAGS CXXFLAGS CPPFLAGS LDFLAGS PKG_CONFIG_PATH PKG_CONFIG_LIBDIR
}

path_of_tool_in_the_toolchain() {
    unset TOOL_PATH
    case $1 in
        cc)  TOOL_PATH="$TOOLCHAIN_BIND/clang"   ;;
        cxx) TOOL_PATH="$TOOLCHAIN_BIND/clang++" ;;
        *)   TOOL_PATH="$TOOLCHAIN_BIND/$1"
    esac
    die_if_not_executable "$TOOL_PATH"
    echo "$TOOL_PATH"
}

__list_supported_target_platform_versions() {
    if [ -z "$1" ] ; then
        for PLATFORM in $(__list_supported_target_platforms)
        do
            printf "%-16s : $(__list_supported_target_platform_versions "$PLATFORM")\n" "$PLATFORM"
        done
    else
        case $1 in
            iPhoneOS|iPhoneSimulator)   echo "8.0 8.1 8.2 8.3 8.4 9.0 9.1 9.2 9.3 10.0 10.1 10.2 10.3 11.0 11.1 11.2 11.3 11.4 12.0 12.1 12.2 12.3 12.4 13.0 13.1 13.2 13.3 13.4 13.5";;
            WatchOS|WatchSimulator)     echo "2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 4.3 5.0 5.1 5.2 5.3 6.0 6.1 6.2";;
            AppleTVOS|AppleTVSimulator) echo "9.0 9.1 9.2 10.0 10.1 10.2 11.0 11.1 11.2 11.3 11.4 12.0 12.1 12.3 12.4 13.0 13.1 13.2 13.3";;
            MacOSX)                     echo "10.6 10.7 10.8 10.9 10.10 10.11 10.12 10.13 10.14 10.15";;
            *)                          die "unsupported platform : $1."
        esac
    fi
}

get_supported_min_version() {
    if [ -z "$1" ] ; then
        for PLATFORM in $(__list_supported_target_platforms)
        do
            printf "%-16s : %s\n" "$PLATFORM" $(get_supported_min_version "$PLATFORM")
        done
    else
        __list_supported_target_platform_versions "$1" | awk '{print $1}'
    fi
}

echo_tool_of_chain() {
    TOOL="$TOOLCHAIN_BIND/$1"
    die_if_not_executable "$TOOL"
    echo "$TOOL"
}

__create_framework_for_the_given_packages() {
    die_if_package_list_is_not_specified "$1"

    for PACKAGE in $@
    do
        __create_framework_for_the_given_package "$PACKAGE"
    done
}

__create_framework_for_the_given_package() {
    die_if_package_is_not_installed "$1"

    unset -f create_framework

    __load_formula_of_the_given_package "$1"
    
    if command -v create_framework > /dev/null ; then
        create_framework
    else
        die "create_framework function is not declared in formula $MY_FORMULA_DIR/$1.yml"
    fi
}

inspect_install_arguments() {
    # https://stackoverflow.com/questions/18476490/what-is-purpose-of-target-arch-variable-in-makefiles
    unset TARGET_ARCH

    unset USER_SPECIFIED_PACKAGE_LIST

    unset RULE

    unset DRYRUN

    CCACHE_ENABLED=yes

    LOG_LEVEL_QUIET=0
    LOG_LEVEL_NORMAL=1
    LOG_LEVEL_VERBOSE=2
    LOG_LEVEL_TRACE=3
    LOG_LEVEL_DEBUG=4

    LOG_LEVEL=$LOG_LEVEL_NORMAL

    BUILD_NJOBS=$NATIVE_OS_NCPU

    BUILD_TYPE=release

    LINK_TYPE=static-prefered

    INSTALL_EXE=yes
    INSTALL_MAN=yes
    INSTALL_DOC=yes
    INSTALL_LIB=yes

    KEEP_WORKING_DIR=no

    NEED_RUN_TREE=no
    NEED_RUN_PACK=no

    TREE_ARGS='--dirsfirst'

    PACK_ARGS=

    while [ -n "$1" ]
    do
        case $1 in
            --rule=*)
                RULE=$(getvalue "$1")
                [ -z "$RULE" ] && die "--rule=<VALUE> , VALUE must not be empty."
                ;;
            --china)
                ;;
            --xtrace|-x)
                LOG_LEVEL=$LOG_LEVEL_TRACE
                ;;
            --debug|-d)
                LOG_LEVEL=$LOG_LEVEL_DEBUG
                ;;
            --verbose|-v)
                LOG_LEVEL=$LOG_LEVEL_VERBOSE
                ;;
            --quiet|-q)
                LOG_LEVEL=$LOG_LEVEL_QUIET
                ;;
            --disable-ccache)
                CCACHE_ENABLED=no
                ;;
            --dry-run)
                DRYRUN=yes
                ;;
            --keep-work-dir)
                KEEP_WORKING_DIR=yes
                ;;
            --tree)
                NEED_RUN_TREE=yes
                ;;
            --tree-args=*)
                TREE_ARGS=$(getvalue "$1")
                ;;
            --pack)
                NEED_RUN_PACK=yes
                ;;
            --pack-type=*)
                unset PACK_TYPE
                PACK_TYPE=$(getvalue "$1")
                case $PACK_TYPE in
                    7z|zip|tar.gz|tar.xz|tar.bz2)
                        PACK_ARGS="--type=$PACK_TYPE"
                        ;;
                    '') die "--pack-type=<VALUE>, VALUE must not be empty." ;;
                    *)  die "--pack-type=<VALUE>, VALUE must be one of 7z zip tar.gz tar.xz tar.bz2."
                esac
                ;;
            --build-type=*)
                BUILD_TYPE=$(getvalue "$1")
                case $BUILD_TYPE in
                    debug|release) ;;
                    '') die "--build-type=<VALUE>, VALUE must not be empty." ;;
                    *)  die "--build-type=<VALUE>, VALUE must be one of debug release"
                esac
                ;;
            --install-doc)
                INSTALL_DOC=yes
                ;;
            --install-man)
                INSTALL_MAN=yes
                ;;
            --install-exe)
                INSTALL_EXE=yes
                ;;
            --install-lib=*)
                INSTALL_LIB=$(getvalue "$1")
                case $INSTALL_LIB in
                    static|shared|both|yes|no) ;;
                    '') die "--install-lib=<VALUE>, VALUE must not be empty." ;;
                    *)  die "--install-lib=<VALUE>, VALUE must be one of static shared both yes no"
                esac
                ;;
            --link-type=*)
                LINK_TYPE=$(getvalue "$1")
                case $LINK_TYPE in
                    static-only|shared-only|static-prefered|shared-prefered) ;;
                    '') die "--link-type=<VALUE>, VALUE must not be empty." ;;
                    *)  die "--link-type=<VALUE>, VALUE must be one of static-only shared-only static-prefered shared-prefered"
                esac
                ;;
            --jobs=*)
                BUILD_NJOBS=$(getvalue "$1")
                is_integer "$BUILD_NJOBS" || die "--jobs=INTEGER argument's value must be a integer."
                ;;
            [a-z]*)
                if [ "$1" = 'all' ] ; then
                    USER_SPECIFIED_PACKAGE_LIST="$(__list_available_packages)"
                else
                    if [ -z "$USER_SPECIFIED_PACKAGE_LIST" ] ; then
                        USER_SPECIFIED_PACKAGE_LIST="$1"
                    else
                        USER_SPECIFIED_PACKAGE_LIST="$USER_SPECIFIED_PACKAGE_LIST $1"
                    fi
                fi
                ;;
            *)  die "unrecognized argument: $1"
        esac
        shift
    done

    if [ "$LOG_LEVEL" -eq "$LOG_LEVEL_QUIET" ] ; then
        exec 1>/dev/null
        exec 2>&1
    fi

    if [ "$LOG_LEVEL" -gt "$LOG_LEVEL_DEBUG" ] ; then
        export PKG_CONFIG_DEBUG_SPEW=set
    fi

    [ -z "$RULE" ] && RULE=default

    __inspect_the_given_rule "$RULE"

    inspect_build_toolchains
}

# use commands: uname curl tar gzip xz sed
__setup() {
    unset FETCH_TOOL

    for FETCH_TOOL in curl wget http lynx aria2c axel
    do
        if command_exists_in_filesystem "$FETCH_TOOL" ; then
            break
        else
            unset FETCH_TOOL
        fi
    done

    if [ -z "$FETCH_TOOL" ] ; then
        error "no any fetch tool[curl, wget, http, lynx, aria2c, axel] found."
        return 1
    else
        unset FETCH_TOOL
    fi

    ##################################################################################

    unset SETUP_WORKING_DIR
    SETUP_WORKING_DIR=$(mktemp -d)

    JSON_FILEPATH="$SETUP_WORKING_DIR/latest.json"

    wfetch "https://api.github.com/repos/leleliu008/uppm-package-repository-macos-$NATIVE_OS_ARCH/releases/latest" --output-path="$JSON_FILEPATH"

    FETCH_BASE_URL="https://github.com/leleliu008/uppm-package-repository-macos-$NATIVE_OS_ARCH/releases/download/$(sed -n '/"tag_name":/p' "$JSON_FILEPATH" | sed 's|  "tag_name": "\(.*\)",|\1|')"

    ##################################################################################

    unset UPPM_ARCHIVE_FILENAME
    UPPM_ARCHIVE_FILENAME=$(sed -n '/"name":/p' "$JSON_FILEPATH" | sed -e 's|[[:space:]]||g' -e 's|"name":"\(.*\)",|\1|' | sed -n '/^uppm-/p')
    UPPM_ARCHIVE_FILEPATH="$SETUP_WORKING_DIR/$UPPM_ARCHIVE_FILENAME"

    wfetch "${FETCH_BASE_URL}/${UPPM_ARCHIVE_FILENAME}" --output-path="$UPPM_ARCHIVE_FILEPATH"

    run install -d "$MY_CORE_DIR"

    run tar vxf "$UPPM_ARCHIVE_FILEPATH" --strip-components=1 --no-same-owner -C "$MY_CORE_DIR"

    rm -rf "$MY_CORE_DIR/.ppkg"

    ##################################################################################

    # https://curl.se/docs/caextract.html
    wfetch 'https://curl.se/ca/cacert.pem' --output-dir="$SETUP_WORKING_DIR"

    run install -d                         "$MY_CORE_DIR/etc/ssl/certs"
    run cp "$SETUP_WORKING_DIR/cacert.pem" "$MY_CORE_DIR/etc/ssl/certs"

    ##################################################################################

    export SSL_CERT_FILE="$MY_CORE_DIR/etc/ssl/certs/cacert.pem"

    if [ -f ~/.uppm/repos.d/offical/.git/config ] ; then
        CLONE=no
    else
        CLONE=yes
    fi

    run "$MY_CORE_BIN_DIR/uppm env"
    run "$MY_CORE_BIN_DIR/uppm update"

    if [ "$CLONE" = yes ] ; then
        cat >> ~/.uppm/repos.d/offical/.git/config <<EOF
[user]
    email = leleliu008@gmail.com
    name = leleliu008
EOF
    fi

    for item in bash coreutils util-linux findutils gawk gsed grep tree curl git zip unzip gtar gzip xz bzip2 lzip patch patchelf pkg-config yq
    do
        run "$MY_CORE_BIN_DIR/uppm install $item"
    done
}

__is_core_tools_installed() {
    [ -e "$MY_CORE_BIN_DIR/uppm" ] || return 1

    for item in bash coreutils util-linux findutils gawk gsed grep tree curl git zip unzip gtar gzip xz bzip2 lzip patch patchelf pkg-config yq
    do
        "$MY_CORE_BIN_DIR/uppm" is-package-installed "$item" || return 1
    done

    return 0
}

__get_perl_home() {
    if [ -z "$1" ] ; then
        if command_exists_in_filesystem perl ; then
            __get_perl_home perl
        fi
    else
        for item in $($1 -V:config_args)
        do
            case $item in
                -Dprefix=*) getvalue "$item"; break
            esac
        done
    fi
}

__setup_PATH_env() {
    # pip install --user <PKG>
    bppend_to_PATH "$HOME/.local/bin"

    # cpan install to default local location
    bppend_to_PATH "$HOME/perl5/bin"

    PERL_HOME=$(__get_perl_home)
    if [ -n "$PERL_HOME" ] ; then
        bppend_to_PATH "$PERL_HOME/bin"
    fi

    for bindir in /opt "$HOME/.uppm/installed" "$MY_HOME_DIR/native"
    do
        if [ -d "$bindir" ] ; then
            for item in $(find "$bindir" -maxdepth 2 -type d -name bin)
            do
                bppend_to_PATH "$item"
            done
        fi
    done

    if [ -f "$HOME/.cargo/env" ] ; then
        .   "$HOME/.cargo/env"
    fi
}

help() {
    if command -v base64 > /dev/null ; then
        LOGO_BASE64_ENCODED='ICAgICAgICAgICAgICAgIF8gICAgICAgICAKX18gIF9fX19fIF8gX18gfCB8IF9fX18gXyAKXCBc
LyAvIF9ffCAnXyBcfCB8LyAvIF9gIHwKID4gIDwgKF9ffCB8XykgfCAgIDwgKF98IHwKL18vXF9c
X19ffCAuX18vfF98XF9cX18sIHwKICAgICAgICAgfF98ICAgICAgICB8X19fLyAK'

        if command -v lolcat > /dev/null ; then
            printf '%s\n' "$LOGO_BASE64_ENCODED" | base64 -d | lolcat -S 350
        elif command -v awk > /dev/null ; then
            printf '%s\n' "$LOGO_BASE64_ENCODED" | base64 -d | lolcat_awk
        else
            printf '%b\n' "${COLOR_BLUE}$(printf '%s\n' "$LOGO_BASE64_ENCODED" | base64 -d)${COLOR_OFF}"
        fi
    fi

    echo "
A package manager for Xcode to build C/C++/Rust/Go project.${COLOR_OFF}

${COLOR_GREEN}xcpkg <ACTION> [ARGUMENT...]${COLOR_OFF}

${COLOR_GREEN}xcpkg --help${COLOR_OFF}
${COLOR_GREEN}xcpkg -h${COLOR_OFF}
    show help of this command.

${COLOR_GREEN}xcpkg --version${COLOR_OFF}
${COLOR_GREEN}xcpkg -V${COLOR_OFF}
    show version of this command.

${COLOR_GREEN}xcpkg --homedir${COLOR_OFF}
    show home directory of this software.

${COLOR_GREEN}xcpkg --homepage${COLOR_OFF}
    show home webpage of this software.

${COLOR_GREEN}xcpkg env${COLOR_OFF}
    show current machine os and xcode toolchain info.

${COLOR_GREEN}xcpkg integrate zsh [-x | --china]${COLOR_OFF}
    download a zsh-completion script file to a approprivate location.

${COLOR_GREEN}xcpkg update${COLOR_OFF}
    update the formula repositories.

${COLOR_GREEN}xcpkg cleanup${COLOR_OFF}
    cleanup the unused cache.

${COLOR_GREEN}xcpkg ls-target-platforms${COLOR_OFF}
    list the supported target platforms.

${COLOR_GREEN}xcpkg ls-target-versions [PLATFORM]${COLOR_OFF}
    list the supported target platform's version.

${COLOR_GREEN}xcpkg ls-target-triples [32bit|64bit|all]${COLOR_OFF}
    list the supported target triples.

${COLOR_GREEN}xcpkg ls-target-archs   [32bit|64bit|all] [PLATFORM]${COLOR_OFF}
    list the supported target archs.

${COLOR_GREEN}xcpkg ls-target-abis    [32bit|64bit|all]${COLOR_OFF}
    list the supported target abis.

${COLOR_GREEN}xcpkg ls-available${COLOR_OFF}
    list the available packages.

${COLOR_GREEN}xcpkg ls-installed${COLOR_OFF}
    list the installed packages.

${COLOR_GREEN}xcpkg ls-outdated${COLOR_OFF}
    list the outdated  packages.

${COLOR_GREEN}xcpkg is-available <PACKAGE> [eq|ne|ge|gt|le|lt VERSION]${COLOR_OFF}
    is PACKAGE available?

${COLOR_GREEN}xcpkg is-installed <PACKAGE>${COLOR_OFF}
    is PACKAGE installed?

${COLOR_GREEN}xcpkg is-outdated  <PACKAGE>${COLOR_OFF}
    is PACKAGE outdated?

${COLOR_GREEN}xcpkg search <KEYWORD>${COLOR_OFF}
    search available packages.

${COLOR_GREEN}xcpkg rule create <RULE>${COLOR_OFF}
    create a new rule.

${COLOR_GREEN}xcpkg rule delete <RULE>${COLOR_OFF}
    delete a exist rule.

${COLOR_GREEN}xcpkg rule rename <R1> <R2>${COLOR_OFF}
    rename a exist rule to new name.

${COLOR_GREEN}xcpkg rule view <RULE>${COLOR_OFF}
    view the given rule.

${COLOR_GREEN}xcpkg rule edit <RULE>${COLOR_OFF}
    edit the specified rule.

${COLOR_GREEN}xcpkg rule list${COLOR_OFF}
    list rules.

${COLOR_GREEN}xcpkg formula create <PACKAGE>${COLOR_OFF}
    create a new formula.

${COLOR_GREEN}xcpkg formula delete <PACKAGE>${COLOR_OFF}
    delete a exist formula.

${COLOR_GREEN}xcpkg formula rename <P1> <P2>${COLOR_OFF}
    rename a exist formula to new name.

${COLOR_GREEN}xcpkg formula view <PACKAGE>${COLOR_OFF}
    view the formula of the given package.

${COLOR_GREEN}xcpkg formula edit <PACKAGE>${COLOR_OFF}
    edit the formula of the given package.

${COLOR_GREEN}xcpkg formula list${COLOR_OFF}
    list all formulas.

${COLOR_GREEN}xcpkg formula-repo [list]${COLOR_OFF}
    list formula-repos.

${COLOR_GREEN}xcpkg formula-repo add <NAME> <URL>${COLOR_OFF}
    add a new formula-repo.

${COLOR_GREEN}xcpkg formula-repo del <NAME>${COLOR_OFF}
    delete a exist formula-repo.

${COLOR_GREEN}xcpkg tree <PACKAGE> [--dirsfirst | -L N]${COLOR_OFF}
    list files of the given installed package in a tree-like format.

${COLOR_GREEN}xcpkg pack <PACKAGE> [--type=7z|zip|tar.gz|tar.xz|tar.bz2]${COLOR_OFF}
    pack the installed package.

${COLOR_GREEN}xcpkg logs <PACKAGE> <PLATFORM/ARCH>${COLOR_OFF}
    show logs of the given installed package.

${COLOR_GREEN}xcpkg info <PACKAGE> [KEY|--json]${COLOR_OFF}
    show information of the given package.

${COLOR_GREEN}xcpkg info @all [--json]${COLOR_OFF}
    show information of all the available packages.

${COLOR_GREEN}xcpkg fetch <PACKAGE>${COLOR_OFF}
    download formula resources of the given package to the cache.

${COLOR_GREEN}xcpkg depends <PACKAGE>${COLOR_OFF}
    show the depends of the given package.

${COLOR_GREEN}xcpkg homepage [--open] [PACKAGE]${COLOR_OFF}
    show or open the homepage of the given package or this project in web browser.

${COLOR_GREEN}xcpkg install   <PACKAGE>... [--rule=xx --jobs=N -v -d -x --dry-run --keep-work-dir]${COLOR_OFF}
    install the given packages.

${COLOR_GREEN}xcpkg reinstall <PACKAGE>... [--rule=xx --jobs=N -v -d -x --dry-run --keep-work-dir]${COLOR_OFF}
    reinstall the given packages.

${COLOR_GREEN}xcpkg upgrade [PACKAGE...] [--rule=xx --jobs=N -v -d -x --dry-run --keep-work-dir]${COLOR_OFF}
    upgrade the given outdated packages.

${COLOR_GREEN}xcpkg uninstall <PACKAGE>...${COLOR_OFF}
    uninstall the given packages.

${COLOR_GREEN}xcpkg create-framework <PACKAGE>...${COLOR_OFF}
    create framework for packages.
    "

    if [ -z "$1" ] ; then
        exit
    else
        exit "$1"
    fi
}

main() {
    set -e

    if [ -n "$XCPKG_XTRACE" ] ; then
        set -x
    fi

    [ "$(uname)" = 'Darwin' ] || die "this software can only be run on macOS."

    unset NATIVE_OS_KIND
    unset NATIVE_OS_TYPE
    unset NATIVE_OS_NAME
    unset NATIVE_OS_VERS
    unset NATIVE_OS_ARCH
    unset NATIVE_OS_NCPU

    NATIVE_OS_KIND=darwin
    NATIVE_OS_TYPE=macos
    NATIVE_OS_NAME=macOS
    NATIVE_OS_VERS="$(sw_vers -productVersion)"
    NATIVE_OS_ARCH="$(uname -m)"
    NATIVE_OS_NCPU="$(sysctl -n machdep.cpu.thread_count)"

    # MY represents this software's
    MY_VERSION=0.1.9
    MY_HOME_PAGE='https://github.com/leleliu008/xcpkg'
    MY_OFFICAL_FORMULA_REPO_URL='https://github.com/leleliu008/xcpkg-formula-repository.git'
    MY_UPGRAGE_URL='https://raw.githubusercontent.com/leleliu008/xcpkg/master/bin/xcpkg'

    if [ -z "$XCPKG_HOME_DIR" ] ; then
        MY_HOME_DIR="$HOME/.xcpkg"
    else
        MY_HOME_DIR="$XCPKG_HOME_DIR"
    fi

    MY_FORMULA_REPO_DIR="$MY_HOME_DIR/repos.d"

    MY_INSTALL_DIR="$MY_HOME_DIR/installed"

    MY_CACHE_DIR="$MY_HOME_DIR/cache.d"

    MY_CACHED_SOURCE_DIR="$MY_CACHE_DIR/src"
    MY_CACHED_BINARY_DIR="$MY_CACHE_DIR/bin"
    MY_CACHED_PATCH__DIR="$MY_CACHE_DIR/fix"

    MY_BACKUP_DIR="$MY_HOME_DIR/backup.d"

    MY_CORE_DIR="$MY_HOME_DIR/core"
    MY_CORE_BIN_DIR="$MY_CORE_DIR/bin"

    unset TIMESTAMP_UNIX

    TIMESTAMP_UNIX="$(date +%s)"

    [ -e "$MY_HOME_DIR/repos" ] || {
        install -d "$MY_HOME_DIR"
        echo "offical=$MY_OFFICAL_FORMULA_REPO_URL"  > "$MY_HOME_DIR/repos"
    }

    install -d "$MY_HOME_DIR/rules"

    [ -e "$MY_HOME_DIR/rules/default" ] || {
        cat > "$MY_HOME_DIR/rules/default" <<EOF
iPhoneOS         : 8.0  : 64bit
iPhoneSimulator  : 9.0  : 64bit
EOF
    }

    [ -e "$MY_HOME_DIR/rules/thread-local-storage" ] || {
        cat > "$MY_HOME_DIR/rules/thread-local-storage" <<EOF
iPhoneOS         : 9.0  : 64bit
iPhoneSimulator  : 9.0  : 64bit
EOF
    }

    case $1 in
        ''|--help|-h)
            help
            return 0
            ;;
        --version|-V)
            printf '%s\n' "$MY_VERSION"
            return 0
            ;;
        --homedir)
            printf '%s\n' "$MY_HOME_DIR"
            return 0
            ;;
        --homepage)
            printf '%s\n' "$MY_HOME_PAGE"
            return 0
            ;;
        setup)
            shift
            __setup
            return 0
            ;;
    esac

    __is_core_tools_installed || {
        error "please run ${COLOR_GREEN}$_0 setup${COLOR_OFF} command first, then try again."
        return 1
    }

    __setup_PATH_env

    case $1 in
        env)
            echo "${COLOR_GREEN}$_0 $MY_VERSION is a package manager for Xcode to build C/C++/Rust/Go project.${COLOR_OFF}"
            echo
            run sw_vers
            echo
            run "id | tr ' ' '\n'"
            echo
            run env
            echo
            run export -p

            inspect_build_toolchains

            echo "$TOOLCHAIN_NAME $TOOLCHAIN_VERS"
            ;;

        ls-target-platforms) shift; __list_supported_target_platforms $@ ;;
        ls-target-versions)  shift; __list_supported_target_platform_versions  $@ ;;
        ls-target-triples)   shift; __list_supported_target_triples   $@ ;;
        ls-target-archs)     shift; __list_supported_target_archs     $@ ;;
        ls-target-abis)      shift; __list_supported_target_abis      $@ ;;

        ls-available) shift; __list_available_packages ;;
        ls-installed) shift; __list_installed_packages ;;
        ls-outdated)  shift; __list__outdated_packages ;;

        is-available) shift; is_package_available $@ ;;
        is-installed) shift; is_package_installed $@ ;;
        is-outdated)  shift; is_package__outdated $@ ;;

        formula-repo)
            shift
            case $1 in
                list) shift; __list_formula_repositories ;;
                add)  shift; __add_a_formula_repo $@ ;;
                del)  shift; __del_a_formula_repo $@ ;;
                *) help 1
            esac
            ;;
        formula)
            shift
            case $1 in
                create) shift; __create_formula_of_the_given_package $@ ;;
                delete) shift; __delete_formula_of_the_given_package $@ ;;
                rename) shift; __rename_formula_of_the_given_package $@ ;;
                view)   shift;   __view_formula_of_the_given_package $@ ;;
                edit)   shift;   __edit_formula_of_the_given_package $@ ;;
                list)   shift; __list_formulas ;;
                   *)   help 1
            esac
            ;;
        rule)
            shift
            case $1 in
                create) shift; __create_the_given_rule $@ ;;
                delete) shift; __delete_the_given_rule $@ ;;
                rename) shift; __rename_the_given_rule $@ ;;
                view)   shift;   __view_the_given_rule $@ ;;
                edit)   shift;   __edit_the_given_rule $@ ;;
                list)   shift; __list_rules ;;
                   *)   help 1
            esac
            ;;
        update)  __update_formula_repositories ;;
        cleanup) __cleanup ;;

        min-version) shift; get_supported_min_version $1 ;;

        search)  shift; __search_packages "$*" ;;

          install) shift;   __install_the_given_packages $@ ;;
        reinstall) shift; __reinstall_the_given_packages $@ ;;
        uninstall) shift; __uninstall_the_given_packages $@ ;;

        upgrade)
            shift
            case $1 in
                @self)
                    shift
                    __upgrade_self "$MY_UPGRAGE_URL" $@ ;;
                *)  __upgrade_packages $@ ;;
                esac
            ;;
        integrate)
            shift;
            case $1 in
                zsh) shift; __integrate_zsh_completions 'https://raw.githubusercontent.com/leleliu008/xcpkg/master/zsh-completion/_xcpkg' $@ ;;
                *)   die "xcpkg integrate $1: not support."
            esac
            ;;
        homepage) shift; __show_or_open_homepage_of_the_given_package $@ ;;
        depends)  shift;          __show_depends_of_the_given_package $@ ;;
        fetch)    shift;       __fetch_resources_of_the_given_package $@ ;;

        logs) shift; __logs_the_given_installed_package $@ ;;
        pack) shift; __pack_the_given_installed_package $@ ;;
        tree) shift; __tree_the_given_installed_package $@ ;;

        info)
            shift
            case $1 in
                @all) __show_infomation_of_all_available_packages $@ ;;
                *)    __show_infomation_of_the_given_package $@ ;;
            esac
            ;;
        create-framework)
            shift
            __create_framework_for_the_given_packages $@
            ;;
        gen-github-workflows)
            shift
            __gen_github_workflows $@
            ;;
        test)
            __compare_versions_with_brew
            ;;
        *)  die "unrecognized argument: $1"
    esac
}

main $@
