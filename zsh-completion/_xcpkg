#compdef xcpkg

_commands=(
    '-h:show help of this command.'
    '--help:show help of this command.'
    '-V:show version of this command.'
    '--version:show version of this command.'
    'search:search packages can be installed.'
    'ls-target-platform-names:list the supportted platforms of target platforms.'
    'ls-target-platform-versions:list the supportted versions of target platforms.'
    'ls-target-platform-archs:list the supportted archs of target platforms.'
    'ls-available:list the available packages.'
    'ls-installed:list the installed packages.'
    'ls-outdated:list the installed packages which can be upgraded.'
    'is-available:is the given package available.'
    'is-installed:is the given package installed.'
    'is-outdated:is the given package outdated.'
    'tree:list files of the given installed package in a tree-like format.'
    'info:show infomation of the given package or all available packages.'
    'formula:create, delete, rename, view, edit the formula of the given package.'
    'formula-repo:add, delete, list the formula-repos.'
    'install:install packages.'
    'reinstall:reinstall packages.'
    'uninstall:uninstall packages.'
    'cleanup:delete the unused cached files.'
    'update:update the formula repository.'
    'upgrade:upgrade the outdated packages.'
    'upgrade-self:upgrade this software.'
    'fetch:download formula resources of the given package to the cache.'
    'integrate:integrate zsh completions.'
    'sysinfo:show your system information.'
    'xcinfo:show your current actived xcode information.'
    'env:show system and current actived xcode information.'
    'depends:show depends of the given package.'
    'pack:pack all the installed files of the given installed package to a archive file.'
    'logs:show logs of the given installed package.'
    'gen-github-workflows:generate github workflows.'
    'gen-url-transform-sample:generate url-transform sample.'
    'compare-versions:compare versions with homebrew.'
)

function _xcpkg_commands() {
    _describe 'command' _commands
}

function _xcpkg_available_packages() {
    local -a _available_packages
    _available_packages=($(xcpkg ls-available 2>/dev/null))
    _describe 'available-packages' _available_packages
}

function _xcpkg_installed_packages() {
    local -a _installed_packages
    _installed_packages=($(xcpkg ls-installed 2>/dev/null))
    _describe 'installed-packages' _installed_packages
}

function _xcpkg_outdated_packages() {
    local -a _outdated_packages
    _outdated_packages=($(xcpkg ls-outdated 2>/dev/null))
    _describe 'outdated-packages' _outdated_packages
}

function _xcpkg() {
    local context state state_descr line
    typeset -A opt_args

    _arguments \
        '1: :_xcpkg_commands' \
        '*:: :->option'

    case $state in
        option)
            case $words[1] in
                ls-target-platform-versions)
                    _arguments ':platform:($(xcpkg ls-target-platform-names))'
                    ;;
                ls-target-platform-archs)
                    _arguments \
                        ':platform:($(xcpkg ls-target-platform-names))' \
                        ':bit:(64bit 32bit all)'
                    ;;
                formula-repo-del)
                    _arguments '1:repo-name:($(xcpkg formula-repo-list | sed -n "/name: /p" | cut -c7-))'
                    ;;
                integrate)
                    _arguments '1:what:(zsh)'
                    ;;
                info)
                    case $words[3] in
                        installed-*|receipt-*)
                            _arguments \
                                '1:package-name:()' \
                                '2:key:(installed-dir installed-files receipt-path receipt-yaml receipt-json installed-timestamp-unix installed-timestamp-rfc-3339 installed-timestamp-iso-8601 installed-timestamp-rfc-3339-utc installed-timestamp-iso-8601-utc installed-version)'
                            ;;
                        *)  _arguments \
                                '1:package-name:(@all $(xcpkg ls-available 2>/dev/null))' \
                                '2:key:(formula-path formula-json formula-yaml summary version license web-url git-url git-sha src-url src-sha fix-url fix-sha res-url res-sha dep-pkg dep-upp dep-pym dep-plm cdefine ccflags xxflags ldflags bscript binbstd bsystem install symlink installed-dir installed-files receipt-path receipt-yaml receipt-json installed-timestamp-unix installed-timestamp-rfc-3339 installed-timestamp-rfc-3339-utc installed-timestamp-iso-8601 installed-timestamp-iso-8601-utc installed-version symlinked-files)'
                    esac
                    ;;
                fetch)
                    _arguments ':package-name:(@all $(xcpkg ls-available 2>/dev/null))'
                    ;;
                depends)
                    _arguments \
                        '1:package-name:_xcpkg_available_packages' \
                        '--format=-[set output format]:format:(dot box svg png)'
                    ;;
                pack)
                    _arguments \
                        '1:package-name:_xcpkg_installed_packages' \
                        '--type=-[set output type]:output-type:(zip tar.gz tar.xz tar.lz tar.bz2)' \
                        '--keep-packing-dir[do not delete packing dir even if succesully packed]'
                    ;;
                tree)
                    _arguments \
                        '1:package-name:_xcpkg_installed_packages' \
                        '-a[show all files, including hidden ones]' \
                        '--dirsfirst[list directories before files]' \
                        '-L[level]:level:(3)'
                    ;;
                logs)
                    _arguments \
                        '1:package-name:_xcpkg_installed_packages'
                    ;;
                install)
                    _arguments \
                        ':package-name:(@all $(xcpkg ls-available 2>/dev/null))' \
                        '--toolchain=-[set which toolchain to use]:toolchain:(zig gcc llvm)' \
                        '--jobs=-[set the number of jobs you can run in parallel]:jobs:(1 2 3 4 5 6 7 8 9)' \
                        '--dry-run[dry-run]' \
                        '--keep-working-dir[do not delete installing dir even if installed success]' \
                        '--build-type=-[set build type]:build-type:(debug release)' \
                        '--link-type=-[link static or shared library]:link-type:(static-only shared-only static-prefered shared-prefered)' \
                        '--export-compile-commands-json[generates compile_commands.json]' \
                        '--disable-ccache[do not use ccache]' \
                        + '(verbose_level)' \
                        '-vv[debug mode. many many messages will be output to terminal]' \
                        '-v[verbose mode. many messages will be output to terminal]' \
                        '-q[silent mode. no any messages will be output to terminal]'
                    ;;
                reinstall)
                    _arguments \
                        ':package-name:_xcpkg_installed_packages' \
                        '--toolchain=-[set which toolchain to use]:toolchain:(zig gcc llvm)' \
                        '--jobs=-[set the number of jobs you can run in parallel]:jobs:(1 2 3 4 5 6 7 8 9)' \
                        '--dry-run[dry-run]' \
                        '--keep-working-dir[do not delete installing dir even if installed success]' \
                        '--build-type=-[set build type]:build-type:(debug release)' \
                        '--link-type=-[link static or shared library]:link-type:(static-only shared-only static-prefered shared-prefered)' \
                        '--export-compile-commands-json[generates compile_commands.json]' \
                        '--disable-ccache[do not use ccache]' \
                        + '(verbose_level)' \
                        '-vv[debug mode. many many messages will be output to terminal]' \
                        '-v[verbose mode. many messages will be output to terminal]' \
                        '-q[silent mode. no any messages will be output to terminal]'
                    ;;
                upgrade)
                    _arguments \
                        ':package-name:_xcpkg_outdated_packages' \
                        '--jobs=-[set the number of jobs you can run in parallel]:jobs:(1 2 3 4 5 6 7 8 9)' \
                        '--dry-run[dry-run]' \
                        '--keep-working-dir[do not delete installing dir even if installed success]' \
                        '--build-type=-[set build type]:build-type:(debug release)' \
                        '--link-type=-[link static or shared library]:link-type:(static-only shared-only static-prefered shared-prefered)' \
                        '--export-compile-commands-json[generates compile_commands.json]' \
                        '--disable-ccache[do not use ccache]' \
                        + '(verbose_level)' \
                        '-vv[debug mode. many many messages will be output to terminal]' \
                        '-v[verbose mode. many messages will be output to terminal]' \
                        '-q[silent mode. no any messages will be output to terminal]'
                    ;;
                uninstall)
                    _arguments '*:package-name:_xcpkg_installed_packages'
                    ;;
                is-available)
                    _arguments '1:package-name:_xcpkg_available_packages'
                    ;;
                is-installed)
                    _arguments '1:package-name:_xcpkg_installed_packages'
                    ;;
                is-outdated)
                    _arguments '1:package-name:_xcpkg_outdated_packages'
                    ;;
            esac
            ;;
        *);;
    esac
}

_xcpkg "$@"
