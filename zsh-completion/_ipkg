#compdef ipkg

_commands=(
    '-h:print the help infomation of ipkg command.'
    '--help:print the help infomation of ipkg command.'
    '-V:print the version of ipkg and NDK.'
    '--version:print the version of ipkg and NDK.'
    'search:search packages can be installed.'
    'target:list the target platforms, target CPU arch, target abis.'
    'ls:list the available, installed and outdated packages.'
    'tree:list files of the given installed package in tree-like format.'
    'info:print the basic infomation of packages.'
    'rule:view, edit a rule or create a new rule.'
    'formula:view,edit the formula of the given package.'
    'install:install packages.'
    'reinstall:reinstall packages.'
    'uninstall:uninstall packages.'
    'cleanup:cleanup the unused cache.'
    'update:update the formula repository.'
    'upgrade:upgrade the outdated packages.'
    'fetch:download formula resources of the given package to the cache.'
    'homepage:show or open the homepage of the given package or the ipkg project.'
    'integrate:integrate zsh completions.'
    'env:show current machine os and xcode toolchain info.'
    'depends:show depends of a package.'
    'prefix:show the installation direcotory of the given package or the ipkg home.'
    'pack:pack the given installed package.'
    'logs:show logs of the given installed package.'
    'is:check something. easy to write script.'
    'create-framework:create framework.'
    'min-version:get the min-version of the specified platform, or all platforms.'
    'gen-github-workflows:generate github workflows.'
)

_target=(
    'platforms:list the supportted platforms of target platforms.'
    'versions:list the supportted versions of target platforms.'
    'triples:list the supportted target triples.'
    'archs:list the supportted archs of target platforms.'
    'abis:list the supportted abis of target platforms.'
)

_list=(
    'available:list the available packages.'
    'installed:list the installed packages.'
    'outdated:list the installed packages which can be upgraded.'
)

function _ipkg_list() {
    _describe 'list' _list
}

function _ipkg_target() {
    _describe 'target' _target
}

function _ipkg_commands() {
    _describe 'command' _commands
}

function _ipkg_available_packages() {
    local -a _available_packages
    _available_packages=($(ipkg list available 2>/dev/null))
    _describe 'available-packages' _available_packages
}

function _ipkg_installed_packages() {
    local -a _installed_packages
    _installed_packages=($(ipkg list installed 2>/dev/null))
    _describe 'installed-packages' _installed_packages
}

function _ipkg_outdated_packages() {
    local -a _outdated_packages
    _outdated_packages=($(ipkg list outdated 2>/dev/null))
    _describe 'outdated-packages' _outdated_packages
}

function _ipkg() {
    local context state state_descr line
    typeset -A opt_args

    _arguments \
        '1: :_ipkg_commands' \
        '*:: :->option'

    case $state in
        option)
            case $words[1] in
                target)
                    _arguments \
                        ':target-subcommand:_ipkg_target' \
                        '*:: :->target-option'
                    case $state in
                        target-option)
                            case $words[1] in
                                versions)
                                    _arguments ':platform:($(ipkg target platforms))';;
                                archs)
                                    _arguments \
                                        ':platform:($(ipkg target platforms))' \
                                        ':bit:(64bit 32bit all)'
                                    ;;
                                abis|triples)
                                    _arguments '1:bit:(64bit 32bit all)' ;;
                            esac
                    esac
                    ;;
                formula)
                    _arguments \
                        ':action:(create delete rename view edit list repo)' \
                        '*:: :->action'
                    case $state in
                        action)
                            case $words[1] in
                                delete|rename|view|edit)
                                    _arguments ':package-name:_ipkg_available_packages'
                                    ;;
                                repo)
                                    _arguments '1:action:(list add del)' '*:: :->repo-subcommand'
                                    case $state in
                                        repo-subcommand)
                                            case $words[1] in
                                                del) _arguments '1:repo-name:($(ipkg formula repo list | cut -d= -f1))' ;;
                                            esac
                                    esac
                                    ;;
                            esac
                    esac
                    ;;
                rule)
                    _arguments \
                        ':action:(create delete rename view edit list)' \
                        '*:: :->action'
                    case $state in
                        action)
                            case $words[1] in
                                delete|rename|view|edit)
                                    _arguments ':package-name:($(ipkg rule list))'
                            esac
                    esac
                    ;;
                tree)
                    _arguments ':package-name:_ipkg_available_packages'
                    ;;
                info)
                    _arguments \
                        '1:package-name:(@all $(ipkg ls available))' \
                        '*:: :->info-subcommand'
                                                    case $state in
                                                        info-subcommand)
                                                            case $words[1] in
                                                                @all) _arguments '--json[output format is json]' ;;
                                                                *) _arguments '1:key:(summary webpage version license src.git src.url src.sum dep.cmd dep.pkg patches cdefine ccflags xxflags ldflags sourced binsrcd bsystem)'
                                                            esac
                                                        esac
                    ;;
                fetch|depends)
                    _arguments ':package-name:_ipkg_available_packages'
                    ;;
                prefix|pack|create-framework)
                    _arguments ':package-name:_ipkg_installed_packages'
                    ;;
                homepage)
                    _arguments \
                        '1:action:(show open)' \
                        '2:package-name:_ipkg_available_packages'
                    ;;
                logs)
                    _arguments \
                        '1:package-name:_ipkg_installed_packages' \
                        '2:abi:($(ipkg target abis $words[2]))' \
                    ;;
                min-version)
                    _arguments \
                        ':platform:($(ipkg target platforms))'
                    ;;
                install)
                    _arguments \
                        '1:package-name:_ipkg_available_packages' \
                        '--rule=-[rule to install]:rule:($(ipkg rule list))' \
                        '--jobs=-[set the number of jobs you can run in parallel with make]:jobs:(1 2 3 4 5 6 7 8 9)' \
                        '--dry-run[dry-run]' \
                        '--keep-working-dir[do not delete working-dir even if installed success]' \
                        '(--verbose -v)'{--verbose,-v}'[verbose output log]' \
                        '(--debug -d)'{--debug,-d}'[debug]' \
                        '(--xtrace -x)'{--xtrace,-x}'[trace execution of commands]'
                    ;;
                reinstall)
                    _arguments \
                        '1:package-name:_ipkg_installed_packages' \
                        '--jobs=-[set the number of jobs you can run in parallel with make]:jobs:(1 2 3 4 5 6 7 8 9)' \
                        '(--verbose -v)'{--verbose,-v}'[verbose output log]' \
                        '(--debug -d)'{--debug,-d}'[debug]' \
                        '(--xtrace -x)'{--xtrace,-x}'[trace execution of commands]'
                    ;;
                upgrade)
                    _arguments \
                        '1:package-name:(@self $(ipkg ls outdated))' \
                        '*:: :->upgrade-subcommand'
                                                    case $state in
                                                        upgrade-subcommand)
                                                            case $words[1] in
                                                                @self)
                                                                    _arguments \
                        '-x[trace execution of commands]' \
                        '--china[use china mirror url]'
                    ;;
                                                                *)
                                                                _arguments \
                        ':package-name:_ipkg_outdated_packages' \
                        '--rule=-[rule to install]:rule:($(ipkg rule list))' \
                        '--jobs=-[set the number of jobs you can run in parallel with make]:jobs:(1 2 3 4 5 6 7 8 9)' \
                        '(--verbose -v)'{--verbose,-v}'[verbose output log]' \
                        '(--debug -d)'{--debug,-d}'[debug]' \
                        '(--xtrace -x)'{--xtrace,-x}'[trace execution of commands]'

                                                            esac
                                                        esac
                                                    ;;
                uninstall)
                    _arguments '*:package-name:_ipkg_installed_packages'
                    ;;
                is)
                    _arguments \
                        '1: :(available installed outdated)' \
                        '2:package-name:_ipkg_available_packages'
                    ;;
                integrate)
                    _arguments ':what:(zsh)'
                    ;;
                gen-github-workflows)
                    _arguments \
                        '--group-size=-[set the group size]:group-size:(50 40 30 20)' \
                        '--output-dir=-[set the output dir]:output-dir:{_files -/}'
                    ;;
                *);;
            esac
            ;;
        *);;
    esac
}

_ipkg "$@"
